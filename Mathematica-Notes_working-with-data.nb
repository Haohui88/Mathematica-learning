(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    223972,       5437]
NotebookOptionsPosition[    199071,       5087]
NotebookOutlinePosition[    199414,       5102]
CellTagsIndexPosition[    199371,       5099]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " Notes"
}], "Title",
 CellChangeTimes->{{3.663475793958352*^9, 3.6634758010379705`*^9}, {
  3.697348967063146*^9, 3.697348975364591*^9}, {3.755819704313386*^9, 
  3.755819704763857*^9}},ExpressionUUID->"9a3df7ec-8142-4e80-bc81-\
12f6de17a7e7"],

Cell["Working with data", "Subtitle",
 CellChangeTimes->{
  3.783144177298246*^9},ExpressionUUID->"e161e7c7-fd04-42ea-aa4e-\
0363b77c43ee"],

Cell["Dr. Liu Haohui", "Text",
 CellChangeTimes->{{3.697349038252264*^9, 3.697349041079406*^9}, {
  3.721085724634827*^9, 3.7210857254948254`*^9}, {3.783144169230703*^9, 
  3.783144169731965*^9}},ExpressionUUID->"4b5f0c3d-ea9a-4836-80c6-\
06eed0ac0908"],

Cell[CellGroupData[{

Cell["Import & export", "Chapter",
 CellChangeTimes->{{3.6669335813509007`*^9, 3.666933589179159*^9}, {
  3.7220407159039416`*^9, 
  3.722040716103942*^9}},ExpressionUUID->"6ac088be-b681-43c0-a7c3-\
275eea05dd65"],

Cell[CellGroupData[{

Cell["Importing flat data ", "Section",
 CellChangeTimes->{{3.667526440378951*^9, 3.667526453291236*^9}, {
   3.669672925621035*^9, 3.669672926892969*^9}, {3.6696803332862263`*^9, 
   3.66968033352641*^9}, {3.6859341157096095`*^9, 3.685934116773367*^9}, 
   3.7832275082785473`*^9},ExpressionUUID->"56fc71a3-15f6-4623-8b61-\
ff6a81789752"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"important", " ", 
     RowBox[{"large", " ", ".", "xlsx"}], " ", "file"}], ",", " ", 
    RowBox[{
    "imported", " ", "as", " ", "a", " ", "list", " ", "of", " ", 
     "matrices"}], ",", " ", 
    RowBox[{
    "corresponding", " ", "to", " ", "data", " ", "from", " ", "sheets"}]}], 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"Needs", "[", "\"\<JLink`\>\"", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ReinstallJava", "[", 
     RowBox[{"JVMArguments", " ", "\[Rule]", " ", "\"\<-Xmx1000m\>\""}], 
     "]"}], ";"}], " ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
     "default", " ", "JVMArguments", " ", "is", " ", "512", " ", "Mb"}], ",", 
     " ", 
     RowBox[{
     "change", " ", "this", " ", "number", " ", "to", " ", "get", " ", 
      "larger", " ", "memory"}]}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "pick", " ", "sheet", " ", "number", " ", "here", " ", "or", " ", 
     "Flatten", " ", "it", " ", "afterwards"}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"data", "=", 
     RowBox[{
      RowBox[{"Import", "[", "\"\<Denver201401b.xlsx\>\"", "]"}], "[", 
      RowBox[{"[", 
       RowBox[{"sheetNumber", ",", ";;", ",", ";;"}], "]"}], "]"}]}], 
    ";"}]}]}]], "Input",
 CellChangeTimes->{{3.6669336105403175`*^9, 3.666933685987982*^9}, {
  3.6669341917777557`*^9, 3.666934225777022*^9}, {3.6703030385089855`*^9, 
  3.670303071199458*^9}},ExpressionUUID->"c5fd5c41-1cb2-4a33-824f-\
e346929bca1f"],

Cell["\<\
When importing comma limited datas, use \[OpenCurlyDoubleQuote]CSV\
\[CloseCurlyDoubleQuote] instead of specifying Delimiters. \
\[OpenCurlyDoubleQuote]Table\[CloseCurlyDoubleQuote] is also a common format, \
but not for .csv data, it imports .csv data as strings. 
Take note that single row data may be imported as a list of list. \
\>", "Text",
 CellChangeTimes->{{3.670563897018566*^9, 3.6705639443389993`*^9}, {
  3.6840262321827545`*^9, 3.6840262355578623`*^9}, {3.684026292626561*^9, 
  3.684026311983413*^9}, {3.6840264384516764`*^9, 
  3.6840265047191477`*^9}},ExpressionUUID->"2315e416-6c2b-4794-89a6-\
dc91901aadb2"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Import", "[", 
    RowBox[{"\"\<file.txt\>\"", ",", "\"\<Table\>\""}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Import", "[", 
    RowBox[{"\"\<file.csv\>\"", ",", "\"\<CSV\>\""}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.670563946293368*^9, 3.670563964506317*^9}, {
  3.6838680380475345`*^9, 3.683868080212283*^9}, {3.683868495497147*^9, 
  3.6838684993096685`*^9}},ExpressionUUID->"78a212ca-8015-4518-b340-\
1fceb7e1d08a"],

Cell["Import data with other delimiters: ", "Text",
 CellChangeTimes->{{3.7572874134054375`*^9, 
  3.7572874390490937`*^9}},ExpressionUUID->"83c7efcb-726f-497d-8ddf-\
2988e41a7f3d"],

Cell[BoxData[
 RowBox[{"Import", "[", 
  RowBox[{"\"\<data.csv\>\"", ",", "\"\<Table\>\"", ",", 
   RowBox[{"\"\<FieldSeparators\>\"", "\[Rule]", "\"\<;\>\""}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.757287448543971*^9, 
  3.7572874489243083`*^9}},ExpressionUUID->"84931e27-b065-459f-9c53-\
b8beccc3d382"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "use", " ", "SemanticImport", " ", "to", " ", "import", " ", "as", " ", 
    "dataset"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"data", "=", 
    RowBox[{"SemanticImport", "[", 
     RowBox[{"\"\<201401.txt\>\"", ",", 
      RowBox[{"Delimiters", "\[Rule]", "\"\<,\>\""}]}], "]"}]}], 
   ";"}]}]], "Input",
 CellChangeTimes->{{3.666933708980057*^9, 3.6669337251522408`*^9}, {
   3.6669338972803016`*^9, 3.6669339009118958`*^9}, 
   3.6675263864110374`*^9},ExpressionUUID->"72c3b71f-406b-4f9b-ba60-\
00108e8223b6"],

Cell["To import lists of strings, use ImportString:", "Text",
 CellChangeTimes->{{3.670303563345726*^9, 3.670303594447652*^9}, {
  3.6703037776282916`*^9, 
  3.6703037848471622`*^9}},ExpressionUUID->"f3ea503a-cc1b-422d-a9c0-\
749a3697287c"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"heading", "=", 
   RowBox[{"ImportString", "[", 
    RowBox[{
     RowBox[{
     "Import", "[", 
      "\"\<C:\\\\Users\\\\a0000548\\\\Documents\\\\Mathematica\\\\headings01.\
txt\>\"", "]"}], ",", "\"\<CSV\>\""}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "Import", " ", "only", " ", "reads", " ", "the", " ", "whole", " ", 
     "thing", " ", "as", " ", "a", " ", "string"}], ",", " ", 
    RowBox[{
    "ImportString", " ", "converts", " ", "it", " ", "to", " ", "matrix", " ",
      "of", " ", "strings"}], ",", " ", 
    RowBox[{"namely", " ", 
     RowBox[{"lists", "/", "tables"}]}], ",", " ", 
    RowBox[{"specify", " ", "string", " ", "format", " ", "correctly"}], ",", 
    " ", 
    RowBox[{
    "\"\<Table\>\"", " ", "only", " ", "recognize", " ", "\"\<\\n\>\"", " ", 
     "as", " ", "separater"}], ",", " ", 
    RowBox[{
    "but", " ", "\"\<CSV\>\"", " ", "recognize", " ", "both", " ", 
     "\"\<\\n\>\"", " ", "and", " ", "\"\<,\>\"", " ", "as", " ", 
     "delimiter"}]}], " ", "*)"}]}]}], "Input",
 CellChangeTimes->{{3.6703038414180803`*^9, 3.670303904624797*^9}, {
  3.670554973804327*^9, 
  3.6705550511252193`*^9}},ExpressionUUID->"916bd2f8-b3bd-4c30-8ec8-\
41904534a2c9"],

Cell["\<\
There are other import functions like ReadList, BinaryReadList, and Get. 
When reading very large files, it may be necessary to read using a lower \
level function:\
\>", "Text",
 CellChangeTimes->{{3.6705527523092346`*^9, 3.670552783578355*^9}, {
  3.7128881757513103`*^9, 
  3.712888220271144*^9}},ExpressionUUID->"93aff176-f888-4077-841a-\
f85be7410c34"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"strR", "=", 
   RowBox[{"OpenRead", "[", "\"\<C:\\\\Users\\\\test.txt\>\"", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"output", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"line", "=", "1"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"While", "[", 
   RowBox[{
    RowBox[{"line", "=!=", 
     RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"line", "=", 
      RowBox[{
       RowBox[{"ReadList", "[", 
        RowBox[{"strR", ",", 
         RowBox[{"{", 
          RowBox[{"Record", ",", "Record", ",", "Record", ",", "Record"}], 
          "}"}], ",", "30", ",", 
         RowBox[{"RecordSeparators", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\"\<\\t\>\"", ",", "\"\<\\n\>\""}], "}"}]}]}], "]"}], "[", 
       RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"AppendTo", "[", 
      RowBox[{"output", ",", "line"}], "]"}], ";"}]}], "]"}], ";"}]}], "Input",
 CellChangeTimes->{{3.7128882048881044`*^9, 
  3.712888230689336*^9}},ExpressionUUID->"195bb4dc-fabf-4e1b-9a22-\
b051232fd015"]
}, Closed]],

Cell[CellGroupData[{

Cell["Importing multiple files and merge them:", "Section",
 CellChangeTimes->{{3.6859341356048436`*^9, 
  3.6859341521136217`*^9}},ExpressionUUID->"6f9194ca-2288-4a02-95be-\
919c4e06f161"],

Cell[TextData[StyleBox["Use FileNames to obtain folder or file names. Read \
multiple files and merge them by appending:",
 FontColor->RGBColor[0.5, 0, 0.5]]], "ItemNumbered",
 CellChangeTimes->{{3.685934698918413*^9, 3.6859347042778816`*^9}, {
   3.6859347600859137`*^9, 3.6859347665079007`*^9}, {3.685934841149184*^9, 
   3.6859348578360567`*^9}, 3.68593499705978*^9, {3.6859350323155527`*^9, 
   3.6859350464563627`*^9}},ExpressionUUID->"520f74ec-183c-455a-bace-\
3c3bb42cd959"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"FileNameJoin", "[", 
    RowBox[{"{", 
     RowBox[{"$UserDocumentsDirectory", ",", "\"\<Mathematica\>\""}], "}"}], 
    "]"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"files", "=", 
    RowBox[{"FileNames", "[", 
     RowBox[{
      RowBox[{"\"\<2012\>\"", "~~", "__", "~~", "\"\<.txt\>\""}], ",", 
      RowBox[{"{", "\"\<C:\\\\subdirectory path\>\"", "}"}], ",", "2"}], 
     "]"}]}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "read", " ", "files", " ", "down", " ", "to", " ", "level", " ", "2"}], 
    ",", " ", 
    RowBox[{"meaning", " ", 
     RowBox[{"files", "/", "subfolders"}], " ", "in", " ", "the", " ", 
     "subdirectory", " ", "path", " ", "and", " ", "all", " ", "the", " ", 
     "files", " ", "in", " ", "the", " ", "subfolders"}]}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"output", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"Drop", "[", 
      RowBox[{
       RowBox[{"Import", "[", 
        RowBox[{"#", ",", "\"\<Table\>\""}], "]"}], ",", "1"}], "]"}], "&"}], 
    "/@", "files"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"optional", ":", " ", 
    RowBox[{
    "Drop", " ", "is", " ", "used", " ", "to", " ", "get", " ", "rid", " ", 
     "of", " ", "title", " ", "line"}]}], " ", "*)"}]}]}], "Input",
 CellChangeTimes->{{3.685934950903454*^9, 3.685934983787075*^9}, 
   3.685935109027627*^9, {3.6871499989155607`*^9, 3.68715001871276*^9}, {
   3.697502476066269*^9, 3.6975025274196863`*^9}, {3.697503532297269*^9, 
   3.6975035572982473`*^9}, {3.707543444408908*^9, 
   3.707543461088745*^9}},ExpressionUUID->"3c7523b0-1940-4da3-8851-\
cf85afd5be73"],

Cell["\<\
Define functions to read from multiple folders, or when there is more \
complicated operations needed: \
\>", "Text",
 CellChangeTimes->{{3.6859350019348617`*^9, 
  3.685935019010301*^9}},ExpressionUUID->"c8d2c421-982a-4caf-8954-\
667072f74a74"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"folders", "=", 
   RowBox[{"FileNames", "[", 
    RowBox[{
     RowBox[{"\"\<2012\>\"", "~~", "__", "~~", "\"\<folder\>\""}], ",", 
     RowBox[{
     "{", "\"\<Z:\\\\05 Data\\\\01 Sunspectra\\\\SINGAPORE SPECTRUM \
DATA\\\\[501]\\\\2015\>\"", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"fnReadData", "[", 
    RowBox[{"path_", "?", "StringQ"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"files", ",", 
       RowBox[{"output", "=", 
        RowBox[{"{", "}"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"SetDirectory", "[", "path", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"files", "=", 
       RowBox[{"FileNames", "[", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"AppendTo", "[", 
         RowBox[{"output", ",", 
          RowBox[{"Drop", "[", 
           RowBox[{
            RowBox[{"Import", "[", 
             RowBox[{"#", ",", "\"\<Table\>\""}], "]"}], ",", "1"}], "]"}]}], 
         "]"}], "&"}], "/@", "files"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"SetDirectory", "[", 
       RowBox[{"FileNameJoin", "[", 
        RowBox[{"{", 
         RowBox[{"$UserDocumentsDirectory", ",", "\"\<Mathematica\>\""}], 
         "}"}], "]"}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Export", "[", 
       RowBox[{
        RowBox[{"\"\<Singapore\>\"", "<>", 
         RowBox[{"StringReplace", "[", 
          RowBox[{
           RowBox[{"FileBaseName", "[", "path", "]"}], ",", 
           RowBox[{"\"\<-\>\"", "\[Rule]", "\"\<\>\""}]}], "]"}], "<>", 
         "\"\<.csv\>\""}], ",", 
        RowBox[{"Flatten", "[", 
         RowBox[{"output", ",", "1"}], "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{
        RowBox[{"FileBaseName", "[", "path", "]"}], "<>", "\"\< done\>\""}], 
       "]"}]}]}], "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "this", " ", "function", " ", "reads", " ", "all", " ", "the", " ", 
     "files", " ", "in", " ", "each", " ", "subfolder", " ", "and", " ", 
     "merge", " ", "them"}], ",", " ", 
    RowBox[{
    "outputing", " ", "one", " ", "merged", " ", "dataset", " ", "for", " ", 
     "each", " ", "subfolder"}]}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"fnReadData", "/@", "folders"}]}], "Input",
 CellChangeTimes->{{3.685934626883646*^9, 3.685934645414003*^9}, {
   3.685934736862589*^9, 3.6859347552914023`*^9}, 3.685934788010111*^9, {
   3.685934896303543*^9, 3.6859349351219444`*^9}, 3.6859351724951153`*^9, {
   3.6975022706449757`*^9, 3.6975022750912995`*^9}, {3.6975025696020174`*^9, 
   3.697502610931756*^9}},ExpressionUUID->"5be9fc79-dac8-4cef-b0c5-\
e2a6c4eb3e4b"]
}, Closed]],

Cell[CellGroupData[{

Cell["Export", "Section",
 CellChangeTimes->{{3.722041536695651*^9, 
  3.7220415385556164`*^9}},ExpressionUUID->"20392b67-68c1-4b4d-9a50-\
70aa0543cf97"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Export", "[", 
    RowBox[{
     RowBox[{"FileNameJoin", "[", 
      RowBox[{"{", 
       RowBox[{"$UserDocumentsDirectory", ",", "\"\<dataset.csv\>\""}], "}"}],
       "]"}], ",", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"MapAt", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"DateString", "[", 
            RowBox[{"#", ",", 
             RowBox[{"{", 
              RowBox[{
              "\"\<Day\>\"", ",", "\"\</\>\"", ",", "\"\<Month\>\"", ",", 
               "\"\</\>\"", ",", "\"\<Year\>\"", ",", "\"\< \>\"", ",", 
               "\"\<Hour\>\"", ",", "\"\<:\>\"", ",", "\"\<Minute\>\""}], 
              "}"}]}], "]"}], "&"}], ",", "#", ",", "1"}], "]"}], "&"}], ",", 
       "data"}], "]"}], ",", "\"\<CSV\>\""}], "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Export", "[", 
   RowBox[{
    RowBox[{"FileNameJoin", "[", 
     RowBox[{"{", 
      RowBox[{"dir", ",", 
       RowBox[{
       "title", "<>", "\"\<_\>\"", "<>", "year", "<>", "\"\<-\>\"", "<>", 
        "month", "<>", "\"\<.png\>\""}]}], "}"}], "]"}], ",", "plot"}], "]"}],
   ";"}]}], "Input",
 CellChangeTimes->{{3.722041556726733*^9, 
  3.7220415824609346`*^9}},ExpressionUUID->"ee73734a-26a7-45d1-8dbc-\
07af0ed2cb1b"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Cursory inspection of data quality", "Chapter",
 CellChangeTimes->{{3.685935183759376*^9, 
  3.6859352045881047`*^9}},ExpressionUUID->"3f07a622-851d-4490-8421-\
7cafd7c65063"],

Cell["\<\
Check dimension of data. If the data is \[OpenCurlyDoubleQuote]ragged\
\[CloseCurlyDoubleQuote], Dimensions will only count elements at level 1, \
instead of full data dimension. \
\>", "ItemNumbered",
 CellChangeTimes->{{3.6859355151718874`*^9, 3.685935526999857*^9}, {
  3.685935569251155*^9, 
  3.6859356181219516`*^9}},ExpressionUUID->"72107af8-4010-4b17-b1f0-\
fc4bb78ad3be"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dimensions", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"a", ",", "b", ",", "c"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"d", ",", "e"}], "}"}], ",", 
    RowBox[{"{", "f", "}"}]}], "}"}], "]"}]], "Input",ExpressionUUID->\
"472bfd39-e5c1-4472-b19d-29053392e69e"],

Cell[BoxData[
 RowBox[{"{", "3", "}"}]], "Output",
 CellChangeTimes->{
  3.6859356538967404`*^9},ExpressionUUID->"d97000ae-8ee9-43b2-8a60-\
17e5f18f2950"]
}, Open  ]],

Cell["\<\
Even when dimensions are intact, missing values may be present as an empty \
string (\[OpenCurlyDoubleQuote]\[CloseCurlyDoubleQuote]), \
\[OpenCurlyDoubleQuote]NA\[CloseCurlyDoubleQuote], extreme values, or other \
forms. In this case, write a simple function to test whether the data matches \
the required format. \
\>", "ItemNumbered",
 CellChangeTimes->{{3.6859357769486103`*^9, 3.6859358140110407`*^9}, {
  3.685942006159643*^9, 
  3.6859420424987316`*^9}},ExpressionUUID->"6bb85e04-1136-45c4-9e11-\
96161706817e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"badData", "[", "entry_", "]"}], ":=", 
   RowBox[{
    RowBox[{"Not", "[", 
     RowBox[{"MatchQ", "[", 
      RowBox[{"entry", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "|", "2"}], ",", 
         RowBox[{"_", "?", "NumberQ"}], ",", 
         RowBox[{"_", "?", "NumberQ"}]}], "}"}]}], "]"}], "]"}], "||", 
    RowBox[{
     RowBox[{"entry", "[", 
      RowBox[{"[", 
       RowBox[{"-", "1"}], "]"}], "]"}], ">", "40"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"filteredData", "=", 
   RowBox[{"DeleteCases", "[", 
    RowBox[{"data", ",", 
     RowBox[{"_", "?", "badData"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.685942060468231*^9, 3.6859420682339845`*^9}, {
   3.6859421852433004`*^9, 3.68594221146792*^9}, 
   3.685942653527314*^9},ExpressionUUID->"a2a35070-cfa8-450b-a8e4-\
de9c4be9c5cf"],

Cell["Alternatively:", "Text",
 CellChangeTimes->{{3.6973455161522336`*^9, 
  3.6973455183760347`*^9}},ExpressionUUID->"1eef8e4b-ca0d-4c1d-9239-\
c22cba648191"],

Cell[BoxData[
 RowBox[{
  RowBox[{"badData", "=", 
   RowBox[{"Cases", "[", 
    RowBox[{"data", ",", 
     RowBox[{"Except", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"_String", ",", "_String", ",", "__Real"}], "}"}], "|", 
       RowBox[{"{", "__String", "}"}]}], "]"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{
  3.697345511073447*^9},ExpressionUUID->"b69ebecb-8506-4a9d-9109-\
2ed80fa80fec"],

Cell["\<\
When suspecting that a data contains some non-numeric values, can use MemberQ \
to find out. \
\>", "ItemNumbered",
 CellChangeTimes->{{3.6992399104173164`*^9, 
  3.699239956642812*^9}},ExpressionUUID->"e22e8ec8-626c-403f-ba72-\
526660b21887"],

Cell[BoxData[
 RowBox[{"SelectFirst", "[", 
  RowBox[{"data", ",", 
   RowBox[{
    RowBox[{"MemberQ", "[", 
     RowBox[{"#", ",", "_String"}], "]"}], "&"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6992398960312777`*^9, 
  3.6992398963751326`*^9}},ExpressionUUID->"e112b546-c11e-4486-b2dc-\
63a692d8c482"],

Cell["Quick summary of data min, max and averages.", "ItemNumbered",
 CellChangeTimes->{{3.7210853836067104`*^9, 
  3.721085399576702*^9}},ExpressionUUID->"d95ee236-fbe0-4ffe-8390-\
bf8be262e40d"],

Cell["\<\
assuming first column of data contains index like timestamp. \
\>", "Text",
 CellChangeTimes->{{3.7210854596525755`*^9, 
  3.7210854737825685`*^9}},ExpressionUUID->"06450780-c1ab-4a2a-ab49-\
5651a83b0217"],

Cell[BoxData[
 RowBox[{"Print", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Range", "[", 
      RowBox[{"Length", "[", "title", "]"}], "]"}], ",", "title", ",", 
     RowBox[{"Flatten", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<min\>\"", ",", 
        RowBox[{"Min", "/@", 
         RowBox[{"Transpose", "[", 
          RowBox[{"data", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", 
             StyleBox[
              RowBox[{"2", ";;", 
               RowBox[{"-", "1"}]}],
              Background->RGBColor[1, 1, 0]]}], "]"}], "]"}], "]"}]}]}], 
       "}"}], "]"}], ",", 
     RowBox[{"Flatten", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<max\>\"", ",", 
        RowBox[{"Max", "/@", 
         RowBox[{"Transpose", "[", 
          RowBox[{"data", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", 
             RowBox[{"2", ";;", 
              RowBox[{"-", "1"}]}]}], "]"}], "]"}], "]"}]}]}], "}"}], "]"}], 
     ",", 
     RowBox[{"Flatten", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<mean\>\"", ",", 
        RowBox[{"Mean", "[", 
         RowBox[{"data", "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", 
            RowBox[{"2", ";;", 
             RowBox[{"-", "1"}]}]}], "]"}], "]"}], "]"}]}], "}"}], "]"}]}], 
    "}"}], "//", "TableForm"}], "]"}]], "Input",
 CellChangeTimes->{{3.7210854090366974`*^9, 
  3.7210854128587604`*^9}},ExpressionUUID->"2e94b845-c5a1-4f3a-9bb0-\
f08674b2a84b"]
}, Closed]],

Cell[CellGroupData[{

Cell["Manipulating data in general", "Chapter",
 CellChangeTimes->{{3.6634760115445943`*^9, 3.6634760315685425`*^9}, {
  3.670564237465408*^9, 3.670564242514555*^9}, {3.6858662756366515`*^9, 
  3.685866280283467*^9}},ExpressionUUID->"a32ae7d5-378f-4c76-931b-\
340d4dcf9285"],

Cell[TextData[StyleBox["Replace missing values using ReplaceAll:",
 FontColor->RGBColor[0.5, 0, 0.5]]], "ItemNumbered",
 CellChangeTimes->{{3.685866293592289*^9, 3.6858663057488*^9}, {
  3.789972190246168*^9, 
  3.789972190246168*^9}},ExpressionUUID->"cd629fa1-e804-41df-9190-\
1be6cc1bcf00"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"data", "/.", 
    RowBox[{"\"\<\>\"", "\[Rule]", 
     RowBox[{"Missing", "[", "\"\<no value\>\"", "]"}]}]}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"/.", " ", 
     RowBox[{
     "usually", " ", "stops", " ", "at", " ", "the", " ", "largest", " ", 
      "subexpression"}]}], ",", " ", 
    RowBox[{
    "sometimes", " ", "may", " ", "need", " ", "to", " ", "use", " ", 
     "Replace", " ", "and", " ", "specify", " ", "levels"}]}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Replace", "[", 
    RowBox[{"data", ",", 
     RowBox[{"\"\<NaN\>\"", "\[Rule]", 
      RowBox[{"Missing", "[", "\"\<NaN\>\"", "]"}]}], ",", "2"}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.6858663107988853`*^9, 3.6858663231203566`*^9}, {
  3.697518165326391*^9, 3.697518258116125*^9}, {3.6975183736752467`*^9, 
  3.6975183746924973`*^9}, {3.724560809854512*^9, 
  3.7245608111657023`*^9}},ExpressionUUID->"a9f3848f-346d-4ee6-a44a-\
c7866a57e3c9"],

Cell["Pick out rows or columns based on labels:", "Text",
 CellChangeTimes->{{3.6858663334360294`*^9, 
  3.685866368307392*^9}},ExpressionUUID->"d342060b-0580-4442-bb65-\
80e2e0ab4256"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"pickData", "=", 
   RowBox[{"Cases", "[", 
    RowBox[{"data", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<row label\>\"", ",", "__"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"pickData", "=", 
   RowBox[{"Select", "[", 
    RowBox[{"data", ",", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"#", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "===", "1"}], "&&", 
       RowBox[{
        RowBox[{"#", "[", 
         RowBox[{"[", "2", "]"}], "]"}], "===", "\"\<label A\>\""}]}], 
      "&"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"pickValue", "=", 
    RowBox[{"Cases", "[", 
     RowBox[{"data", ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<row label\>\"", ",", "y_Real", ",", "__"}], "}"}], 
       "\[Rule]", "y"}]}], "]"}]}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"return", " ", "the", " ", "value", " ", "of", " ", "y"}], " ", 
   "*)"}]}]}], "Input",
 CellChangeTimes->{{3.685866326670249*^9, 3.685866329185954*^9}, {
   3.6858663726980953`*^9, 3.685866399379714*^9}, {3.685941956727182*^9, 
   3.685941965019819*^9}, 3.6859421686353507`*^9, {3.6859429457525406`*^9, 
   3.6859429627218895`*^9}, {3.6875953015872526`*^9, 
   3.6875953346107674`*^9}},ExpressionUUID->"edb76c35-4ae0-4b88-8fc0-\
f053eae3281e"],

Cell[TextData[StyleBox["Get rid of Missing in averages of the following form: \
",
 FontColor->RGBColor[0.5, 0, 0.5]]], "ItemNumbered",
 CellChangeTimes->{{3.685866293592289*^9, 3.6858663057488*^9}, {
  3.789972410487239*^9, 
  3.789972429247258*^9}},ExpressionUUID->"f7ad0782-115b-4573-84e4-\
ed9c9d1f6cd7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"t", "=", 
   RowBox[{
    FractionBox["1", "4"], " ", 
    RowBox[{"(", 
     RowBox[{"23", "\[VeryThinSpace]", "+", 
      RowBox[{"2", " ", 
       RowBox[{"Missing", "[", "]"}]}]}], ")"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.789968917416085*^9, 3.7899689204747953`*^9}, {
   3.7899722298146334`*^9, 3.789972237355895*^9}, 3.7899723532377377`*^9, {
   3.7899724553069167`*^9, 3.7899724657987385`*^9}},
 CellLabel->
  "In[668]:=",ExpressionUUID->"be797016-34e5-454f-8eaf-df9a3dc31130"],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "=", 
   RowBox[{
    RowBox[{"Quiet", "@", 
     RowBox[{"Check", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"#", "[", 
         RowBox[{"[", 
          RowBox[{"2", ",", "1"}], "]"}], "]"}], "/", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"1", "/", 
            RowBox[{"First", "@", "t"}]}], "-", 
           RowBox[{"#", "[", 
            RowBox[{"[", 
             RowBox[{"2", ",", "2"}], "]"}], "]"}]}], "/.", 
          RowBox[{"_Missing", "\[Rule]", "1"}]}], ")"}]}], ",", "#"}], 
      "]"}]}], "&"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.789972224078834*^9, 3.7899722250976048`*^9}, 
   3.7899722553849497`*^9, {3.7899723313091455`*^9, 3.7899723316262197`*^9}, {
   3.7899723813499775`*^9, 3.789972391425583*^9}},
 CellLabel->
  "In[664]:=",ExpressionUUID->"75dd9c42-370e-46a6-b0f7-2166e10a7b5e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "@", "t"}]], "Input",
 CellChangeTimes->{{3.7899722561166573`*^9, 3.7899722575057487`*^9}},
 CellLabel->
  "In[669]:=",ExpressionUUID->"32425017-4332-4879-acb9-89454c7e6f5b"],

Cell[BoxData[
 FractionBox["23", "2"]], "Output",
 CellChangeTimes->{
  3.7899722595959377`*^9, {3.7899723394680986`*^9, 3.7899723562497177`*^9}, 
   3.789972395707396*^9, {3.789972461743593*^9, 3.7899724723420563`*^9}},
 CellLabel->
  "Out[669]=",ExpressionUUID->"61ecdace-aae8-4678-bd96-08fe6b4d6527"]
}, Open  ]],

Cell["\<\
When there are many columns, can refer to column number by names by defining \
an association: \
\>", "ItemNumbered",
 CellChangeTimes->{{3.70027514874664*^9, 
  3.7002751716591344`*^9}},ExpressionUUID->"a41a8c2e-7f20-4127-bd08-\
4a9faa43a4d9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"index", "=", 
   RowBox[{"AssociationThread", "[", 
    RowBox[{"title", "\[Rule]", 
     RowBox[{"Range", "[", 
      RowBox[{"Length", "[", "title", "]"}], "]"}]}], "]"}]}], ";"}]], "Input",\
ExpressionUUID->"0b4053e6-46f3-4ee6-95ad-f5a12f614c91"],

Cell["Extract rows that have max value in a certain column", "ItemNumbered",
 CellChangeTimes->{{3.7245607508054357`*^9, 
  3.7245607836614113`*^9}},ExpressionUUID->"0c7a17d7-aa7c-470b-b407-\
338e60ca7e48"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"dat", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"10", ",", "b", ",", "30"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"100", ",", "a", ",", "40"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1000", ",", "b", ",", "10"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1000", ",", "b", ",", "70"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"100", ",", "b", ",", "20"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"10", ",", "b", ",", "70"}], "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"dat", "~", "Extract", "~", 
     RowBox[{"Position", "[", 
      RowBox[{"#", ",", 
       RowBox[{"Max", "@", "#"}]}], "]"}]}], "&"}], "@", 
   RowBox[{"Part", "[", 
    RowBox[{
     RowBox[{"dat", "\[Transpose]"}], ",", 
     StyleBox["3",
      Background->RGBColor[1, 1, 0]]}], "]"}]}], " ", "//", "AbsoluteTiming", 
  RowBox[{"(*", 
   RowBox[{"column", " ", "3"}], "*)"}]}]}], "Input",
 CellChangeTimes->{{3.7245607929107924`*^9, 3.724560796919606*^9}, {
  3.7860752037041454`*^9, 3.7860752057967935`*^9}},
 CellLabel->
  "In[239]:=",ExpressionUUID->"09481e9a-fa94-482f-ab3a-55e0920aa1c6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.0000289`", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1000", ",", "b", ",", "70"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"10", ",", "b", ",", "70"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.7860751791943026`*^9, 3.786075206084016*^9}},
 CellLabel->
  "Out[240]=",ExpressionUUID->"0737980f-ca74-4a76-99a8-8a7129862ab7"]
}, Open  ]],

Cell["or more simply:", "Text",
 CellChangeTimes->{{3.786075182424157*^9, 
  3.786075187948707*^9}},ExpressionUUID->"d945c612-54f2-45ed-9462-\
06fa09eccdfb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"MaximalBy", "[", 
   RowBox[{"dat", ",", 
    RowBox[{
     RowBox[{"#", "[", 
      RowBox[{"[", "3", "]"}], "]"}], "&"}]}], "]"}], "//", 
  "AbsoluteTiming"}]], "Input",
 CellChangeTimes->{{3.7860751899908876`*^9, 3.7860752235269375`*^9}},
 CellLabel->
  "In[242]:=",ExpressionUUID->"a931f0bf-d55f-4221-9aa8-d0cfa0758272"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.0001465`", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1000", ",", "b", ",", "70"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"10", ",", "b", ",", "70"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.7860751979875565`*^9, 3.786075224742674*^9}},
 CellLabel->
  "Out[242]=",ExpressionUUID->"87845b86-7009-4253-a91f-943d6327342f"]
}, Open  ]],

Cell["\<\
when max value resides in another list and need to extract corresponding \
position: \
\>", "Text",
 CellChangeTimes->{{3.7860751478341312`*^9, 
  3.7860751735036697`*^9}},ExpressionUUID->"aaec049d-bb9a-4140-8513-\
e564ef391309"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Extract", "[", 
   RowBox[{
    RowBox[{"dat", "[", 
     RowBox[{"[", 
      RowBox[{"All", ",", 
       RowBox[{";;", "2"}]}], "]"}], "]"}], ",", 
    RowBox[{"Position", "[", 
     RowBox[{
      RowBox[{"dat", "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "3"}], "]"}], "]"}], ",", 
      RowBox[{"n_", "/;", 
       RowBox[{"n", "==", 
        RowBox[{"Max", "[", 
         RowBox[{"dat", "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", "3"}], "]"}], "]"}], "]"}]}]}]}], "]"}]}], 
   "]"}], "//", "AbsoluteTiming"}]], "Input",
 CellChangeTimes->{{3.7860752573528614`*^9, 3.7860753058665504`*^9}},
 CellLabel->
  "In[244]:=",ExpressionUUID->"d8db1f03-8191-47b4-8648-7b36bc7bc3e1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.0000359`", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1000", ",", "b"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"10", ",", "b"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.786075299291484*^9, 3.786075306192644*^9}},
 CellLabel->
  "Out[244]=",ExpressionUUID->"83bee762-55de-4544-b8c8-b52e4ab4b81e"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Comparing, extracting or merging data", "Section",
 CellChangeTimes->{{3.6705642779666567`*^9, 3.6705642832065706`*^9}, {
  3.6992425323252172`*^9, 
  3.6992425414582834`*^9}},ExpressionUUID->"ef734c53-8b5a-44ae-9ce3-\
c60aff36882d"],

Cell[TextData[StyleBox["Combining multiple lists by first column as index \
with an inner join:",
 FontColor->RGBColor[0.5, 0, 0.5]]], "ItemNumbered",
 CellChangeTimes->{{3.6875957005000725`*^9, 3.6875957233559475`*^9}, {
   3.7008785802775965`*^9, 3.7008785824854393`*^9}, 
   3.7578936605303454`*^9},ExpressionUUID->"9f82eb04-f715-4703-a2a2-\
8ba40e8e1f53"],

Cell["\<\
This operation combines two lists with an inner join (only retain indices \
that both have). 
Yellow highlighted number = number of lists - 1. 
Need to make sure lists are regularly shaped and no duplicate keys are \
present, otherwise column will get mixed up (dimension is not regular). \
\>", "Text",
 CellChangeTimes->{{3.721019094999316*^9, 3.721019117232586*^9}, {
  3.721019194095028*^9, 3.72101923003915*^9}, {3.7512406977524214`*^9, 
  3.7512407374818044`*^9}, {3.7779552327551975`*^9, 
  3.777955260604141*^9}},ExpressionUUID->"c269fd47-159d-4335-84b3-\
2f2f54279c68"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Flatten", "[", 
    RowBox[{"{", 
     RowBox[{"#", ",", 
      RowBox[{"Rest", "/@", 
       RowBox[{"{", "##2", "}"}]}]}], "}"}], "]"}], "&"}], "@@@", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{
     RowBox[{"Pick", "[", 
      RowBox[{"#", ",", 
       RowBox[{
        RowBox[{"Length", "@", "#"}], ">", 
        StyleBox["2",
         Background->RGBColor[1, 1, 0]]}]}], "]"}], "&"}], "/@", 
    RowBox[{"GatherBy", "[", 
     RowBox[{
      RowBox[{"Join", "[", 
       RowBox[{"list1", ",", "list2", ",", "list3"}], "]"}], ",", "First"}], 
     "]"}]}], ")"}]}]], "Input",ExpressionUUID->"3e137f24-fc99-4c8b-891f-\
64d13f4cb079"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Flatten", "[", 
    RowBox[{"{", 
     RowBox[{"#", ",", 
      RowBox[{"Rest", "/@", 
       RowBox[{"{", "##2", "}"}]}]}], "}"}], "]"}], "&"}], "@@@", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{
     RowBox[{"Pick", "[", 
      RowBox[{"#", ",", 
       RowBox[{
        RowBox[{"Length", "@", "#"}], ">", 
        StyleBox["1",
         Background->RGBColor[1, 1, 0]]}]}], "]"}], "&"}], "/@", 
    RowBox[{"GatherBy", "[", 
     RowBox[{
      RowBox[{"Join", "[", 
       RowBox[{"list1", ",", "list2"}], "]"}], ",", "First"}], "]"}]}], 
   ")"}]}]], "Input",
 CellChangeTimes->{{3.7148766655307217`*^9, 
  3.7148766669515133`*^9}},ExpressionUUID->"1ae6b602-2349-4ff1-91dc-\
9d61e408c9b4"],

Cell["More generally: ", "Text",
 CellChangeTimes->{{3.757894191016144*^9, 
  3.75789419304578*^9}},ExpressionUUID->"c7bea361-f6af-4729-8c67-\
f27c4276bccf"],

Cell[BoxData[
 RowBox[{
  RowBox[{"fnMergeData", "[", "list_", "]"}], ":=", 
  RowBox[{
   RowBox[{
    RowBox[{"Flatten", "[", 
     RowBox[{"{", 
      RowBox[{"#", ",", 
       RowBox[{"Rest", "/@", 
        RowBox[{"{", "##2", "}"}]}]}], "}"}], "]"}], "&"}], "@@@", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{"Pick", "[", 
       RowBox[{"#", ",", 
        RowBox[{
         RowBox[{"Length", "@", "#"}], ">", 
         RowBox[{
          RowBox[{"Length", "@", "list"}], "-", "1"}]}]}], "]"}], "&"}], "/@", 
     RowBox[{"GatherBy", "[", 
      RowBox[{
       RowBox[{"Join", "@@", "list"}], ",", "First"}], "]"}]}], 
    ")"}]}]}]], "Input",
 CellChangeTimes->{{3.7578942067271633`*^9, 3.757894219824486*^9}, {
  3.7578942721391535`*^9, 
  3.7578942723791533`*^9}},ExpressionUUID->"15e22e07-1328-45a8-a7a6-\
7a8abd520eba"],

Cell["Illustration: ", "Text",
 CellChangeTimes->{{3.7512393509229736`*^9, 3.7512393526939306`*^9}, {
  3.7512398039408092`*^9, 
  3.751239806824746*^9}},ExpressionUUID->"9f5931b1-25a8-4264-8b2a-\
89324781949e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"list1", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a", ",", "a1", ",", "a2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"b", ",", "b1", ",", "b2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"c", ",", "c1", ",", "c2"}], "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"list2", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a", ",", "a3", ",", "a4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"b", ",", "b3", ",", "b4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"c", ",", "c4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"d", ",", "d3", ",", "d4"}], "}"}]}], "}"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.7512393559855194`*^9, 3.7512394599880667`*^9}, {
   3.7512395550920405`*^9, 3.7512395737220697`*^9}, 
   3.7512407408838873`*^9},ExpressionUUID->"52c662e4-94c4-4f89-abc4-\
21404b6514e4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"GatherBy", "[", 
  RowBox[{
   RowBox[{"Join", "[", 
    RowBox[{"list1", ",", "list2"}], "]"}], ",", "First"}], "]"}]], "Input",Ex\
pressionUUID->"c50b9e47-b1ef-451d-9f55-cfd35b60e1b5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a", ",", "a1", ",", "a2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"a", ",", "a3", ",", "a4"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"b", ",", "b1", ",", "b2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"b", ",", "b3", ",", "b4"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"c", ",", "c1", ",", "c2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"c", ",", "c4"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{"d", ",", "d3", ",", "d4"}], "}"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.7512394481324387`*^9, 3.7512394633296523`*^9}, 
   3.751239576856843*^9, 
   3.7512407436023273`*^9},ExpressionUUID->"8ef59fa0-8730-4df8-ab0b-\
623415a0b5f3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Pick", "[", 
    RowBox[{"#", ",", 
     RowBox[{
      RowBox[{"Length", "@", "#"}], ">", 
      StyleBox["1",
       Background->RGBColor[1, 1, 0]]}]}], "]"}], "&"}], "/@", 
  RowBox[{"GatherBy", "[", 
   RowBox[{
    RowBox[{"Join", "[", 
     RowBox[{"list1", ",", "list2"}], "]"}], ",", "First"}], "]"}]}]], "Input",\
ExpressionUUID->"cdcf5832-dd20-4e91-aea2-2893d0315863"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a", ",", "a1", ",", "a2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"a", ",", "a3", ",", "a4"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"b", ",", "b1", ",", "b2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"b", ",", "b3", ",", "b4"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"c", ",", "c1", ",", "c2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"c", ",", "c4"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.751239473228217*^9, 3.7512395790624585`*^9, 
  3.7512396898620863`*^9, 3.751239746818367*^9, 
  3.751240745628242*^9},ExpressionUUID->"99b6856a-0e6e-4afb-b866-\
6e8d98ea6ad2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Rest", "/@", 
    RowBox[{"{", "##2", "}"}]}], "&"}], "@@", 
  RowBox[{"First", "[", "%", "]"}]}]], "Input",
 CellChangeTimes->{{3.7512396611666126`*^9, 3.7512396865805087`*^9}, 
   3.751239742716315*^9},ExpressionUUID->"13a25a30-5a0e-42ac-956b-\
8f077ea107ef"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"a3", ",", "a4"}], "}"}], "}"}]], "Output",
 CellChangeTimes->{
  3.751239701963808*^9, {3.751239744557166*^9, 3.751239747557864*^9}, 
   3.751240746696682*^9},ExpressionUUID->"ec6d5bfa-5414-4d08-9dd8-\
4207de792833"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Flatten", "[", 
    RowBox[{"{", 
     RowBox[{"#", ",", 
      RowBox[{"Rest", "/@", 
       RowBox[{"{", "##2", "}"}]}]}], "}"}], "]"}], "&"}], "@@@", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{
     RowBox[{"Pick", "[", 
      RowBox[{"#", ",", 
       RowBox[{
        RowBox[{"Length", "@", "#"}], ">", 
        StyleBox["1",
         Background->RGBColor[1, 1, 0]]}]}], "]"}], "&"}], "/@", 
    RowBox[{"GatherBy", "[", 
     RowBox[{
      RowBox[{"Join", "[", 
       RowBox[{"list1", ",", "list2"}], "]"}], ",", "First"}], "]"}]}], 
   ")"}]}]], "Input",
 CellChangeTimes->{{3.7148766655307217`*^9, 
  3.7148766669515133`*^9}},ExpressionUUID->"89be77f5-1b6a-464f-9574-\
46a777b8e81d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "a1", ",", "a2", ",", "a3", ",", "a4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "b1", ",", "b2", ",", "b3", ",", "b4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "c1", ",", "c2", ",", "c4"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.7512395379770555`*^9, 
  3.751240747617154*^9},ExpressionUUID->"baca8112-81d4-4d8d-b0dd-\
4e265bef220f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"%", "//", "TableForm"}]], "Input",
 CellChangeTimes->{{3.7512407565100813`*^9, 
  3.751240758401116*^9}},ExpressionUUID->"8534773c-73aa-4230-b957-\
d7376c2c63be"],

Cell[BoxData[
 InterpretationBox[GridBox[{
    {"a", "a1", "a2", "a3", "a4"},
    {"b", "b1", "b2", "b3", "b4"},
    {"c", "c1", "c2", "c4", "\<\"\"\>"}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}],
  TableForm[{{$CellContext`a, $CellContext`a1, $CellContext`a2, \
$CellContext`a3, $CellContext`a4}, {$CellContext`b, $CellContext`b1, \
$CellContext`b2, $CellContext`b3, $CellContext`b4}, {$CellContext`c, \
$CellContext`c1, $CellContext`c2, $CellContext`c4}}]]], "Output",
 CellChangeTimes->{
  3.751240758711257*^9},ExpressionUUID->"f7b6cde8-ae10-449e-b66e-\
42899758decb"]
}, Open  ]],

Cell[TextData[StyleBox["(More generally) Convert to associations and use \
JoinAcross to merge them:",
 FontColor->RGBColor[0.5, 0, 0.5]]], "ItemNumbered",
 CellChangeTimes->{{3.7148765395857677`*^9, 3.714876550689068*^9}, {
   3.714876630761339*^9, 3.7148766341489553`*^9}, {3.721018475519444*^9, 
   3.721018479478738*^9}, {3.7512399517809515`*^9, 3.7512399555031753`*^9}, {
   3.7519253164454393`*^9, 3.7519253164454393`*^9}, 
   3.7578936869795094`*^9},ExpressionUUID->"5c53e4b5-bc91-4ec7-b6b0-\
190a384e46e2"],

Cell["\<\
tables to be joined must be regular in shape. 
keyPosition should be the column number to be used as common key for joining. \
For tables with headers, keyPosition should be the column number of the first \
table or the name of the column. 
Header must be the first row. 
For tables without header, all columns will be kept (treated as no collision \
of keys). 
Make sure that the key column does not contain duplicate values, otherwise \
all possible combinations will be enumerated. \
\>", "Text",
 CellChangeTimes->{{3.751929046497923*^9, 3.7519290537337866`*^9}, {
  3.7519291288397355`*^9, 3.751929246742407*^9}, {3.7519292813188753`*^9, 
  3.7519292872334785`*^9}, {3.751929777833232*^9, 3.7519298131452446`*^9}, {
  3.7779539654880667`*^9, 
  3.777954040691386*^9}},ExpressionUUID->"276cb093-8dc1-4d6e-b866-\
d1501e5ca80c"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "fnMergeData", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"keyPosition", "\[Rule]", "1"}], ",", 
     RowBox[{"header", "\[Rule]", "True"}], ",", 
     RowBox[{"joinMethod", "\[Rule]", "\"\<Outer\>\""}], ",", 
     RowBox[{"keyCollisionFunction", "\[Rule]", "Right"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"fnMergeData", "[", 
    RowBox[{"data_", ",", 
     RowBox[{"opt", ":", 
      RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "keyIndex", ",", "toAssoc", ",", "associationTable", ",", "joinedSet"}],
       "}"}], ",", "\n", "\n", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"OptionValue", "@", "header"}], ",", "\n", 
        RowBox[{
         RowBox[{"keyIndex", "=", 
          RowBox[{"OptionValue", "[", "keyPosition", "]"}]}], ";", "\n", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"NumericQ", "[", "keyIndex", "]"}], ",", 
           RowBox[{"keyIndex", "=", 
            RowBox[{
             RowBox[{"data", "[", 
              RowBox[{"[", 
               RowBox[{"1", ",", "1"}], "]"}], "]"}], "[", 
             RowBox[{"[", "keyIndex", "]"}], "]"}]}]}], "]"}], ";", " ", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
           "when", " ", "there", " ", "is", " ", "header", " ", "line"}], ",",
            " ", 
           RowBox[{
           "assign", " ", "keyIndex", " ", "to", " ", "be", " ", "the", " ", 
            "name", " ", "of", " ", "the", " ", "variable"}]}], "*)"}], "\n", 
         RowBox[{
          RowBox[{"toAssoc", "[", "table_", "]"}], ":=", 
          RowBox[{"With", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"index", "=", 
              RowBox[{"First", "@", "table"}]}], "}"}], ",", 
            RowBox[{
             RowBox[{
              RowBox[{"AssociationThread", "[", 
               RowBox[{"index", "->", "#"}], "]"}], "&"}], "/@", 
             RowBox[{"Rest", "[", "table", "]"}]}]}], "]"}]}], ";", "\n", 
         RowBox[{"associationTable", "=", 
          RowBox[{"toAssoc", "/@", "data"}]}], ";", "\n", 
         RowBox[{"joinedSet", "=", 
          RowBox[{"Fold", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"JoinAcross", "[", 
              RowBox[{"#1", ",", "#2", ",", "keyIndex", ",", 
               RowBox[{"OptionValue", "[", "joinMethod", "]"}], ",", 
               RowBox[{"KeyCollisionFunction", "->", 
                RowBox[{"OptionValue", "[", "keyCollisionFunction", "]"}]}]}],
               "]"}], "&"}], ",", "associationTable"}], "]"}]}], ";"}], "\n", 
        ",", "\n", 
        RowBox[{"(*", 
         RowBox[{
         "when", " ", "there", " ", "is", " ", "no", " ", "header", " ", 
          "line"}], "*)"}], "\n", 
        RowBox[{
         RowBox[{"keyIndex", "=", 
          RowBox[{"OptionValue", "[", "keyPosition", "]"}]}], ";", "\n", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
            RowBox[{"assign", " ", "a", " ", "unique", " ", "index", " ", 
             RowBox[{"(", 
              RowBox[{"as", " ", "string"}], ")"}], " ", "to", " ", "each", 
             " ", "column", " ", "in", " ", "the", " ", "format", " ", "of", 
             " ", "table", "#"}], "-", 
            RowBox[{"column", "#"}]}], ",", " ", 
           RowBox[{
           "except", " ", "the", " ", "column", "#", " ", "of", " ", "the", 
            " ", "keyPosition"}], ",", " ", 
           RowBox[{
           "which", " ", "will", " ", "remain", " ", "as", " ", "it", " ", 
            "is"}]}], "*)"}], "\n", 
         RowBox[{
          RowBox[{"toAssoc", "[", 
           RowBox[{"table_", ",", "tableNumber_"}], "]"}], ":=", 
          RowBox[{"With", "[", "\n", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"index", "=", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"Length", "@", 
                  RowBox[{"Dimensions", "@", "table"}]}], ">", "1"}], ",", 
                "\n", 
                RowBox[{"ReplacePart", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{"ToString", "@", "tableNumber"}], "<>", 
                    "\"\<-\>\"", "<>", 
                    RowBox[{"ToString", "[", "#", "]"}]}], "&"}], "/@", 
                   RowBox[{"Range", "@", 
                    RowBox[{
                    RowBox[{"Dimensions", "[", "table", "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}]}], ",", 
                  RowBox[{"keyIndex", "->", 
                   RowBox[{"ToString", "@", "keyIndex"}]}]}], "]"}], "\n", 
                ",", " ", 
                RowBox[{"(*", "else", "*)"}], "\n", 
                RowBox[{"ToString", "@", "keyIndex"}]}], "]"}]}], "}"}], ",", 
            "\n", 
            RowBox[{
             RowBox[{
              RowBox[{"AssociationThread", "[", 
               RowBox[{"index", "->", "#"}], "]"}], "&"}], "/@", "table"}]}], 
           "]"}]}], ";", "\n", 
         RowBox[{"(*", 
          RowBox[{
          "convert", " ", "all", " ", "datasets", " ", "into", " ", 
           "associations"}], "*)"}], "\n", 
         RowBox[{"associationTable", "=", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"toAssoc", "[", 
             RowBox[{
              RowBox[{"data", "[", 
               RowBox[{"[", "i", "]"}], "]"}], ",", "i"}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", 
              RowBox[{"Length", "@", "data"}]}], "}"}]}], "]"}]}], ";", "\n", 
         "\n", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
           "merge", " ", "datasets", " ", "from", " ", "left", " ", "to", " ",
             "right"}], ",", " ", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"i", ".", "e", "."}], " ", "..."}], 
             RowBox[{"JoinAcross", "[", 
              RowBox[{
               RowBox[{"JoinAcross", "[", 
                RowBox[{"dataset1", ",", "dataset2"}], "]"}], ",", 
               "dataset3"}], "]"}]}], "..."}]}], "*)"}], "\n", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
           "when", " ", "using", " ", "\"\<Left\>\"", " ", "or", " ", 
            "\"\<Right\>\"", " ", "as", " ", "joining", " ", "method"}], ",", 
           " ", 
           RowBox[{
           "arrange", " ", "datasets", " ", "so", " ", "that", " ", "the", 
            " ", "leftmost", " ", "or", " ", "rightmost", " ", "dataset", " ",
             "has", " ", "the", " ", "master", " ", "keys"}]}], "*)"}], "\n", 
         RowBox[{"joinedSet", "=", 
          RowBox[{"Fold", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"JoinAcross", "[", 
              RowBox[{"#1", ",", "#2", ",", 
               RowBox[{"ToString", "@", "keyIndex"}], ",", 
               RowBox[{"OptionValue", "[", "joinMethod", "]"}], ",", 
               RowBox[{"KeyCollisionFunction", "->", 
                RowBox[{"OptionValue", "[", "keyCollisionFunction", "]"}]}]}],
               "]"}], "&"}], ",", "associationTable"}], "]"}]}], ";"}]}], 
       "\n", "]"}], ";", "\n", "\n", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
        "returned", " ", "output", " ", "may", " ", "be", " ", "unsorted"}], 
        ",", " ", 
        RowBox[{
        "can", " ", "apply", " ", "sort", " ", "function", " ", 
         "afterwards"}]}], "*)"}], "\n", 
      RowBox[{"Return", "[", 
       RowBox[{"joinedSet", "//", "Dataset"}], "]"}]}]}], "\n", "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.7519254516744165`*^9, 3.7519254980751553`*^9}, {
   3.7519255352869954`*^9, 3.751925535477007*^9}, {3.751925580501299*^9, 
   3.7519256066556025`*^9}, {3.7519256411184006`*^9, 3.751925726017272*^9}, {
   3.75192582259945*^9, 3.751925891877471*^9}, {3.751925961965327*^9, 
   3.751926219914998*^9}, {3.751926356528798*^9, 3.7519263599726825`*^9}, {
   3.7519264236000605`*^9, 3.7519264507825975`*^9}, {3.751926502518095*^9, 
   3.751926504131301*^9}, 3.751926875441022*^9, {3.7519269421661406`*^9, 
   3.7519269622291183`*^9}, {3.751927218966464*^9, 3.75192723561775*^9}, {
   3.7519279815620456`*^9, 3.7519280063181486`*^9}, {3.7519280522329564`*^9, 
   3.7519280587166796`*^9}, {3.751928094966041*^9, 3.75192812817829*^9}, {
   3.751928297205821*^9, 3.7519283916602983`*^9}, {3.7519287160028257`*^9, 
   3.75192885289145*^9}, 3.75192893047337*^9, {3.7519289975923247`*^9, 
   3.751929033261589*^9}, {3.7519290734442463`*^9, 3.7519291257681932`*^9}, 
   3.7519293068240395`*^9, {3.7519293807570157`*^9, 3.751929381067017*^9}, {
   3.751929474498613*^9, 3.751929480291712*^9}, {3.7519297381214457`*^9, 
   3.751929740812805*^9}, {3.7519413157734766`*^9, 3.7519413182289953`*^9}, 
   3.777954723078803*^9},ExpressionUUID->"0ba05db5-aa9c-483c-bbd6-\
2362e2ca45fb"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Time series data", "Chapter",
 CellChangeTimes->{{3.6634760115445943`*^9, 3.6634760315685425`*^9}, {
   3.670564237465408*^9, 3.670564242514555*^9}, 3.7257701904302936`*^9, {
   3.7632693947058916`*^9, 
   3.7632693965794272`*^9}},ExpressionUUID->"4be31ab2-4fba-4320-864f-\
6802869a2580"],

Cell[CellGroupData[{

Cell["Handling time stamps", "Section",
 CellChangeTimes->{
  3.763269371119445*^9},ExpressionUUID->"5d7c5e6b-5a34-459d-a42c-\
c1609d877a44"],

Cell[CellGroupData[{

Cell["Date and time objects", "Subsection",
 CellChangeTimes->{{3.667521183835722*^9, 3.6675212112755527`*^9}, {
  3.667521243804951*^9, 
  3.6675212464439106`*^9}},ExpressionUUID->"17f6f54b-f44a-4ca5-ae4c-\
61a2f4925fb5"],

Cell[TextData[StyleBox["Use DateObject to convert time stamp strings into \
date/time objects. When first two columns contain date and time, use the \
following code to convert them into one date object:",
 FontColor->RGBColor[0.5, 0, 0.5]]], "ItemNumbered",
 CellChangeTimes->{{3.6859512254566746`*^9, 3.6859512439241714`*^9}, {
  3.685951781840497*^9, 
  3.685951818676795*^9}},ExpressionUUID->"6e7d839c-fd7b-4d38-ae1f-\
82b1a6f92f69"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"timeStamp", "=", 
   RowBox[{"DateObject", "/@", 
    RowBox[{"Map", "[", 
     RowBox[{"StringRiffle", ",", 
      RowBox[{"data", 
       StyleBox["[",
        Background->RGBColor[1, 1, 0]], 
       StyleBox[
        RowBox[{"[", 
         RowBox[{"All", ",", 
          RowBox[{"1", ";;", "2"}]}], "]"}],
        Background->RGBColor[1, 1, 0]], 
       StyleBox["]",
        Background->RGBColor[1, 1, 0]]}]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"List", "/@", "timeStamp"}], ",", 
     RowBox[{"data", 
      StyleBox["[",
       Background->RGBColor[1, 1, 0]], 
      StyleBox[
       RowBox[{"[", 
        RowBox[{"All", ",", 
         RowBox[{"3", ";;", 
          RowBox[{"-", "1"}]}]}], "]"}],
       Background->RGBColor[1, 1, 0]], 
      StyleBox["]",
       Background->RGBColor[1, 1, 0]]}], ",", "2"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.6859512500492716`*^9, 3.685951254143057*^9}, {
   3.6859517623401976`*^9, 3.685951778668623*^9}, {3.6975115899157667`*^9, 
   3.6975116232701483`*^9}, 
   3.7220413912454724`*^9},ExpressionUUID->"4d9f764c-144d-4d12-8774-\
ece1c5ced986"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"in", " ", "short"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"data", "=", 
    RowBox[{"Join", "[", 
     RowBox[{
      RowBox[{"List", "/@", 
       RowBox[{"DateObject", "/@", 
        RowBox[{"Map", "[", 
         RowBox[{"StringRiffle", ",", 
          RowBox[{"data", 
           StyleBox["[",
            Background->RGBColor[1, 1, 0]], 
           StyleBox[
            RowBox[{"[", 
             RowBox[{"All", ",", 
              RowBox[{"1", ";;", "2"}]}], "]"}],
            Background->RGBColor[1, 1, 0]], 
           StyleBox["]",
            Background->RGBColor[1, 1, 0]]}]}], "]"}]}]}], ",", 
      RowBox[{"data", 
       StyleBox["[",
        Background->RGBColor[1, 1, 0]], 
       StyleBox[
        RowBox[{"[", 
         RowBox[{"All", ",", 
          RowBox[{"3", ";;", 
           RowBox[{"-", "1"}]}]}], "]"}],
        Background->RGBColor[1, 1, 0]], 
       StyleBox["]",
        Background->RGBColor[1, 1, 0]]}], ",", "2"}], "]"}]}], 
   ";"}]}]], "Input",
 CellChangeTimes->{{3.7173854820412836`*^9, 3.717385486751836*^9}, 
   3.7220413862233124`*^9},ExpressionUUID->"fa5e321b-d772-48a1-a5c6-\
5d1ea8343a2a"],

Cell["Alternatively, more concise way: ", "Text",
 CellChangeTimes->{{3.7645583061003485`*^9, 
  3.7645583157235284`*^9}},ExpressionUUID->"86dd70c3-70a6-46fe-bacc-\
a18d3621036d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"data", "/.", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"d_String", ",", "t_String", ",", "z__"}], "}"}], 
     "\[RuleDelayed]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"DateList", "[", 
        RowBox[{"d", "<>", "\"\<:\>\"", "<>", "t"}], "]"}], ",", "z"}], 
      "}"}]}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7645583231047554`*^9, 
  3.7645583231047554`*^9}},ExpressionUUID->"bfed69e4-b97d-4fe5-acce-\
c34a9680b173"],

Cell["\<\
When interpretation is ambiguous, convert the string into standard format \
using DateList, to be input into DateObject: \
\>", "Text",
 CellChangeTimes->{{3.686884627182226*^9, 3.6868846665625052`*^9}, {
  3.6868927397262793`*^9, 
  3.686892743507572*^9}},ExpressionUUID->"7ec1caaf-7c56-42e3-906d-\
ef8e168f97e7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"DateList", "[", 
   RowBox[{"{", 
    RowBox[{"\"\<2/8/2016 8:47\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Day\>\"", ",", "\"\</\>\"", ",", "\"\<Month\>\"", ",", "\"\</\>\"",
        ",", "\"\<Year\>\"", ",", "\"\< \>\"", ",", "\"\<Hour\>\"", ",", 
       "\"\<:\>\"", ",", "\"\<Minute\>\""}], "}"}]}], "}"}], "]"}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.6705421370240464`*^9, 3.670542138914736*^9}, 
   3.6705425636527576`*^9, {3.6705426740146637`*^9, 3.6705427418490257`*^9}, 
   3.6705571435139246`*^9, {3.6705583432723017`*^9, 3.6705583737098565`*^9}, 
   3.6719220203680224`*^9, {3.6868927021373873`*^9, 
   3.686892759367222*^9}},ExpressionUUID->"6a6da98d-5f43-4e7e-83b8-\
74bad989ed18"],

Cell["\<\
When interpretation of a string is ambiguous, the default seems to be \
month/day/year. \
\>", "Text",
 CellChangeTimes->{{3.671859671513832*^9, 3.6718596975850353`*^9}, {
   3.671936823515959*^9, 3.671936825699312*^9}, 
   3.7043336588451777`*^9},ExpressionUUID->"755c85b0-cb04-4732-b98d-\
8254f8b49ad7"],

Cell["More generic way of manipulating date strings: ", "Text",
 CellChangeTimes->{{3.68689277256114*^9, 
  3.686892797498535*^9}},ExpressionUUID->"6ed0e381-8409-49ce-bc6f-\
b88f352f7aac"],

Cell[BoxData[{
 RowBox[{"DateObject", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"StringCases", "[", 
     RowBox[{"\"\<2/3/2013 08:10:00\>\"", ",", 
      RowBox[{
       RowBox[{
       "x__", "~~", "\"\</\>\"", "~~", "y__", "~~", "\"\</\>\"", "~~", "z__", 
        "~~", "Whitespace", "~~", "h__", "~~", "\"\<:\>\"", "~~", "m__", 
        "~~", "\"\<:\>\"", "~~", "s__"}], "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"z", ",", "x", ",", "y", ",", "h", ",", "m", ",", "s"}], 
        "}"}]}]}], "]"}], "//", "Flatten"}], "//", "ToExpression"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"when", " ", "using", " ", "StringCases"}], ",", " ", 
    RowBox[{
    "be", " ", "careful", " ", "whether", " ", "it", " ", "returns", " ", "a",
      " ", "single", " ", "result"}], ",", " ", 
    RowBox[{"a", " ", "list", " ", "of", " ", "multiple", " ", "results"}], 
    ",", " ", 
    RowBox[{
     RowBox[{"or", " ", "a", " ", "list", " ", "of", " ", "lists"}], ";", " ", 
     RowBox[{
     "if", " ", "this", " ", "is", " ", "to", " ", "be", " ", "used", " ", 
      "as", " ", "input", " ", "to", " ", "another", " ", "function"}]}], ",",
     " ", 
    RowBox[{
    "be", " ", "sure", " ", "to", " ", "convert", " ", "it", " ", "into", " ",
      "expression"}]}], " ", "*)"}]}]}], "Input",ExpressionUUID->"6661b923-\
db18-478e-8223-acf8339a9d85"],

Cell[TextData[StyleBox["Time stamp objects can be compared, can use this to \
filter desired time. ",
 FontColor->RGBColor[0.5, 0, 0.5]]], "ItemNumbered",
 CellChangeTimes->{{3.6860212915576897`*^9, 
  3.686021329404749*^9}},ExpressionUUID->"98ad3697-8a82-46ef-b8d3-\
b8055765a867"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Select", "[", 
   RowBox[{"data", ",", 
    RowBox[{
     RowBox[{
      TemplateBox[{RowBox[{"\"Fri 1 Jul 2016 03:00:00\"", 
          StyleBox[
           RowBox[{"\"GMT+\"", "\[InvisibleSpace]", "8.`"}], FontColor -> 
           GrayLevel[0.5]]}],RowBox[{"DateObject", "[", 
          RowBox[{
            RowBox[{"{", 
              RowBox[{"2016", ",", "7", ",", "1"}], "}"}], ",", 
            RowBox[{"TimeObject", "[", 
              RowBox[{
                RowBox[{"{", 
                  RowBox[{"3", ",", "0", ",", "0.`"}], "}"}], ",", 
                RowBox[{"TimeZone", "\[Rule]", "8.`"}]}], "]"}], ",", 
            RowBox[{"TimeZone", "\[Rule]", "8.`"}]}], "]"}]},
       "DateObject",
       Editable->False], "<", 
      RowBox[{"#", "[", 
       RowBox[{"[", "1", "]"}], "]"}], "<", 
      TemplateBox[{RowBox[{"\"Fri 1 Jul 2016 05:30:00\"", 
          StyleBox[
           RowBox[{"\"GMT+\"", "\[InvisibleSpace]", "8.`"}], FontColor -> 
           GrayLevel[0.5]]}],RowBox[{"DateObject", "[", 
          RowBox[{
            RowBox[{"{", 
              RowBox[{"2016", ",", "7", ",", "1"}], "}"}], ",", 
            RowBox[{"TimeObject", "[", 
              RowBox[{
                RowBox[{"{", 
                  RowBox[{"5", ",", "30", ",", "0.`"}], "}"}], ",", 
                RowBox[{"TimeZone", "\[Rule]", "8.`"}]}], "]"}], ",", 
            RowBox[{"TimeZone", "\[Rule]", "8.`"}]}], "]"}]},
       "DateObject",
       Editable->False]}], "&"}]}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Select", "[", 
    RowBox[{"data", ",", 
     RowBox[{
      RowBox[{"DaylightQ", "[", 
       RowBox[{"#", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "]"}], "&"}]}], "]"}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "select", " ", "only", " ", "the", " ", "time", " ", "when", " ", "there", 
    " ", "is", " ", "day", " ", 
    RowBox[{"light", ".", " ", "Note"}], " ", "this", " ", "may", " ", "be", 
    " ", "slightly", " ", "less", " ", "than", " ", "sun", " ", "rise", " ", 
    "to", " ", "sun", " ", "set", " ", 
    RowBox[{"time", ".", " ", "Note"}], " ", "this", " ", "may", " ", "be", 
    " ", "time", " ", 
    RowBox[{"consuming", "."}]}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Select", "[", 
    RowBox[{"data", ",", 
     RowBox[{
      RowBox[{
       RowBox[{"DateDifference", "[", 
        RowBox[{
         RowBox[{"Sunrise", "[", 
          RowBox[{
           RowBox[{"#", "[", 
            RowBox[{"[", "1", "]"}], "]"}], ",", 
           RowBox[{"TimeDirection", "\[Rule]", 
            RowBox[{"-", "1"}]}]}], "]"}], ",", 
         RowBox[{"Sunset", "[", 
          RowBox[{"#", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "]"}], "<", 
       RowBox[{"Quantity", "[", 
        RowBox[{"1", ",", "\"\<Days\>\""}], "]"}]}], "&"}]}], "]"}], ";"}], 
  " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "equivalent", " ", "way", " ", "to", " ", "select", " ", "day", " ", 
    "time", " ", "data"}], " ", "*)"}]}]}], "Input",
 CellChangeTimes->{{3.6860212826854506`*^9, 3.6860212844511633`*^9}, {
  3.6860216727773595`*^9, 3.686021677481347*^9}, {3.6860221603441815`*^9, 
  3.6860222175510607`*^9}, {3.6860229679105835`*^9, 3.686022995671847*^9}, {
  3.6860238076210666`*^9, 
  3.6860238187533913`*^9}},ExpressionUUID->"32a568aa-c016-4a34-abed-\
a7e3fa88cd6b"],

Cell[TextData[{
 StyleBox["Use DateString to convert to strings",
  FontColor->RGBColor[0.5, 0, 0.5]],
 ", can specify format. \nit can also interpret strings and convert to \
another format. "
}], "ItemNumbered",
 CellChangeTimes->{{3.667521258676702*^9, 3.667521289004543*^9}, {
   3.6675262176723676`*^9, 3.6675262441524353`*^9}, 
   3.685951139026024*^9},ExpressionUUID->"f6f2ec34-a0ba-495e-87ba-\
31737b7a68a1"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"DateString", "[", 
   RowBox[{"dateObject", ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Month\>\"", ",", "\"\</\>\"", ",", "\"\<Day\>\"", ",", "\"\</\>\"", 
      ",", "\"\<Year\>\""}], "}"}]}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"DateString", "[", 
    RowBox[{"timeObject", ",", "\"\<Time\>\""}], "]"}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "use", " ", "\"\<Time\>\"", " ", "to", " ", "give", " ", "full", " ", 
     "time", " ", "format"}], ",", " ", 
    RowBox[{"otherwise", " ", "just", " ", 
     RowBox[{"hour", ":", "min"}]}]}], " ", "*)"}]}]}], "Input",
 CellChangeTimes->{
  3.6634792894107656`*^9, 3.6675212229729567`*^9, {3.6675213151744394`*^9, 
   3.6675213182226114`*^9}, {3.667526358209675*^9, 3.667526412042512*^9}, {
   3.667531795808874*^9, 3.6675318081528177`*^9}, 
   3.670564264212575*^9},ExpressionUUID->"abdad07f-9186-400c-b9dd-\
d71935d21e02"],

Cell["\<\
Sometimes day and month needs to be two characters long, create lists of \
strings like this:  \
\>", "Text",
 CellChangeTimes->{{3.6974979089261713`*^9, 
  3.6974979828222666`*^9}},ExpressionUUID->"a2b677ee-536e-479c-a879-\
0e6bed4b4bd1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"dates", "=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"#", "<", "10"}], ",", 
        RowBox[{"\"\<0\>\"", "<>", 
         RowBox[{"ToString", "[", "#", "]"}]}], ",", 
        RowBox[{"ToString", "[", "#", "]"}]}], "]"}], "&"}], ",", 
     RowBox[{"DateRange", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"2017", ",", "2", ",", "7"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2017", ",", "2", ",", "15"}], "}"}]}], "]"}], ",", 
     RowBox[{"{", "2", "}"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.697497918038052*^9, 
  3.6974979206068993`*^9}},ExpressionUUID->"936f10ef-56c5-4140-9e3a-\
44ed27d72a47"],

Cell[TextData[StyleBox["Select only the times of desired intervals. ",
 FontColor->RGBColor[0.5, 0, 0.5]]], "ItemNumbered",
 CellChangeTimes->{{3.698382071411624*^9, 3.698382114321579*^9}, {
  3.6983824617213273`*^9, 
  3.69838247144593*^9}},ExpressionUUID->"9e1757b7-6983-4daa-a208-\
cc90d178e6a9"],

Cell["\<\
Use DateValue to extract elements from a date or time object. \
\>", "Text",
 CellChangeTimes->{{3.698382476964528*^9, 
  3.6983824928038654`*^9}},ExpressionUUID->"7610c7fe-b7b0-42a3-8097-\
b7db4445702e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Select", "[", 
   RowBox[{"data", ",", 
    RowBox[{
     RowBox[{
      RowBox[{"Mod", "[", 
       RowBox[{
        RowBox[{"DateValue", "[", 
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", "1", "]"}], "]"}], ",", "\"\<Minute\>\""}], "]"}], 
        ",", "10"}], "]"}], "\[Equal]", "0"}], "&"}]}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.698382794813876*^9, 
  3.698382799830097*^9}},ExpressionUUID->"d8ae1b76-54d3-4bec-949a-\
1208e68b16d8"],

Cell["Perform averaging for the time intervals:", "Text",
 CellChangeTimes->{{3.6992425467287903`*^9, 
  3.6992425661961575`*^9}},ExpressionUUID->"4175b3a2-defd-437a-8d3b-\
0921b3e1182f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"output", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"t", "=", "1"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"While", "[", 
   RowBox[{
    RowBox[{"t", "\[LessEqual]", 
     RowBox[{
      RowBox[{"Length", "[", "data", "]"}], "-", "10"}]}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"timeStamp1", "=", 
      RowBox[{"data", "[", 
       RowBox[{"[", 
        RowBox[{"t", ",", "1"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"dataBin", "=", 
      RowBox[{"Select", "[", 
       RowBox[{
        RowBox[{"data", "[", 
         RowBox[{"[", 
          RowBox[{"t", ";;", 
           RowBox[{"t", "+", "10"}]}], "]"}], "]"}], ",", 
        RowBox[{
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "<", 
          RowBox[{"(", 
           RowBox[{"timeStamp1", "+", 
            RowBox[{"Quantity", "[", 
             RowBox[{"10", ",", "\"\<Minutes\>\""}], "]"}]}], ")"}]}], 
         "&"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"dataOut", "=", 
      RowBox[{
       RowBox[{"Total", "[", 
        RowBox[{"dataBin", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", 
           RowBox[{"2", ";;", 
            RowBox[{"-", "1"}]}]}], "]"}], "]"}], "]"}], "/", 
       RowBox[{"Length", "[", "dataBin", "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"AppendTo", "[", 
      RowBox[{"output", ",", 
       RowBox[{"Prepend", "[", 
        RowBox[{"dataOut", ",", "timeStamp1"}], "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"t", "=", 
      RowBox[{"t", "+", 
       RowBox[{"Length", "[", "dataBin", "]"}]}]}], ";"}]}], "]"}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.6992425861816373`*^9, 
  3.6992426064482183`*^9}},ExpressionUUID->"5c140b5d-1c07-4d65-bd6f-\
d7dd7dbf48cf"],

Cell[TextData[StyleBox["Find out which days are present in a dataset. ",
 FontColor->RGBColor[0.5, 0, 0.5]]], "ItemNumbered",
 CellChangeTimes->{{3.700545624500607*^9, 3.7005456393732905`*^9}, {
  3.763269637547372*^9, 
  3.7632696502613974`*^9}},ExpressionUUID->"16c385d4-5f33-4a4f-8d01-\
9e9749a2f875"],

Cell[BoxData[
 RowBox[{
  RowBox[{"dates", "=", 
   RowBox[{"Union", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"DateValue", "[", 
       RowBox[{"#", ",", 
        RowBox[{"{", 
         RowBox[{"\"\<Year\>\"", ",", "\"\<Month\>\"", ",", "\"\<Day\>\""}], 
         "}"}]}], "]"}], "&"}], "/@", 
     RowBox[{"data", "[", 
      RowBox[{"[", 
       RowBox[{"All", ",", "1"}], "]"}], "]"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7005485182873945`*^9, 
  3.700548519107708*^9}},ExpressionUUID->"69be033e-5258-40a5-bf3d-\
d1fd64b14697"]
}, Closed]],

Cell["String version time stamp manipulation", "Subsection",
 CellChangeTimes->{{3.7632697808726926`*^9, 
  3.7632697898538427`*^9}},ExpressionUUID->"fa96bddb-4acb-4c0c-8121-\
5ab58d9161fe"]
}, Closed]],

Cell[CellGroupData[{

Cell["Time series & temporal data object", "Section",
 CellChangeTimes->{{3.76326956871391*^9, 3.7632695963917313`*^9}, {
  3.7764931732458277`*^9, 
  3.7764931853176556`*^9}},ExpressionUUID->"5f59669c-e94d-43fa-8e08-\
259a2ab9c378"],

Cell[TextData[StyleBox["Multidimensional time series data",
 FontColor->RGBColor[0.5, 0, 0.5]]], "ItemNumbered",
 CellChangeTimes->{{3.6992426728788495`*^9, 3.6992426862509785`*^9}, {
   3.763269613701214*^9, 3.7632696137017155`*^9}, 3.7632696696533885`*^9, {
   3.7764927675149393`*^9, 3.7764927675149393`*^9}, {3.777599865445881*^9, 
   3.7775998864611683`*^9}},ExpressionUUID->"dc3b82d6-76a4-478b-b01f-\
31b981d8f4ed"],

Cell[BoxData[
 RowBox[{"ts", "=", 
  RowBox[{"TimeSeries", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"First", "@", "#"}], ",", 
       RowBox[{"Rest", "@", "#"}]}], "}"}], "&"}], "/@", 
    RowBox[{"data", "[", 
     RowBox[{"[", 
      RowBox[{"All", ",", 
       RowBox[{"1", ";;", "3"}]}], "]"}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.777600118442829*^9, 
  3.777600123461054*^9}},ExpressionUUID->"69d250a7-b059-4df3-ab1f-\
aa3486a0e430"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ts", "[", "\"\<ValueDimensions\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.7764813743303337`*^9, 3.776481404520317*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"7a602d84-bcfc-4a21-b44c-7240eda5064e"],

Cell[BoxData["2"], "Output",
 CellChangeTimes->{{3.776481376681983*^9, 3.776481404851581*^9}},
 CellLabel->"Out[12]=",ExpressionUUID->"105e6883-7dc1-49cb-a4b5-b2b5f473d157"]
}, Open  ]],

Cell["Extract parts after flattening the value vector: ", "Text",
 CellChangeTimes->{{3.778455722827279*^9, 
  3.7784557381141367`*^9}},ExpressionUUID->"f5a293c7-64b0-40b8-b8ec-\
eab58195887a"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Flatten", "[", "#", "]"}], "\[LeftDoubleBracket]", 
     RowBox[{"{", 
      RowBox[{"1", ",", "3"}], "}"}], "\[RightDoubleBracket]"}], "&"}], "/@", 
   RowBox[{
    RowBox[{"ts", "[", "\"\<Path\>\"", "]"}], "\[LeftDoubleBracket]", 
    RowBox[{";;", "10"}], "\[RightDoubleBracket]"}]}], "//", 
  "DateListPlot"}]], "Input",
 CellChangeTimes->{{3.7784556368622503`*^9, 3.7784556525729494`*^9}, {
  3.778455719089175*^9, 
  3.778455720345657*^9}},ExpressionUUID->"5e2b8ec0-bfe4-4016-aabb-\
c80cb4e92087"],

Cell["\<\
OR better, use temporal data
For a table of dataset sharing same timestamp at column 1: \
\>", "Text",
 CellChangeTimes->{{3.778457830567602*^9, 3.7784578369088354`*^9}, {
  3.7784578843451595`*^9, 3.778457904187398*^9}, {3.789344518904406*^9, 
  3.7893445255131617`*^9}},ExpressionUUID->"c034fb95-5686-4d9b-90c6-\
80de5fe82dc0"],

Cell[BoxData[
 RowBox[{"td", "=", 
  RowBox[{"TemporalData", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"data", "[", 
      RowBox[{"[", 
       RowBox[{"All", ",", 
        RowBox[{"2", ";;"}]}], "]"}], "]"}], "\[Transpose]"}], ",", 
    RowBox[{"{", 
     RowBox[{"First", "/@", "data"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.778457842595253*^9, 
  3.778457857398308*^9}},ExpressionUUID->"8f0a7eb6-dec8-4698-ab33-\
39657af36742"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"td", "[", 
   RowBox[{"\"\<Path\>\"", ",", "3"}], "]"}], "//", 
  "DateListPlot"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "plot", " ", "time", " ", "series", " ", "of", " ", "the", " ", "fourth", 
    " ", "column"}], " ", "*)"}]}]}], "Input",
 CellChangeTimes->{{3.7784578732352047`*^9, 3.7784578746610885`*^9}, {
  3.7893444416333694`*^9, 3.789344453455063*^9}, {3.7893445081234922`*^9, 
  3.789344513219754*^9}},ExpressionUUID->"30a56a4a-2035-415b-92d4-\
be161e4fcea5"],

Cell["\<\
Note that temporal data converts timestamps to AbsoluteTime in YOUR local \
timezone! (timezone information of the original timestamp is lost)\
\>", "Text",
 CellChangeTimes->{{3.7893461390382705`*^9, 
  3.7893461876575017`*^9}},ExpressionUUID->"94589f93-9bef-4d18-8149-\
b6a264d19784"],

Cell["\<\
Note that if duplicate timestamps exist, TemporalData takes the average of \
all values corresponding to the same timestamp. \
\>", "Text",
 CellChangeTimes->{{3.7899721211744432`*^9, 
  3.7899721629127445`*^9}},ExpressionUUID->"4a0766f0-b36f-4b19-b909-\
0a831e5db1f8"],

Cell[TextData[StyleBox["Integration for time series data",
 FontColor->RGBColor[0.5, 0, 0.5]]], "ItemNumbered",
 CellChangeTimes->{{3.6992426728788495`*^9, 3.6992426862509785`*^9}, {
   3.763269613701214*^9, 3.7632696137017155`*^9}, 3.7632696696533885`*^9, {
   3.7764927675149393`*^9, 3.7764927675149393`*^9}, {3.7775998708556147`*^9, 
   3.7775998906728535`*^9}},ExpressionUUID->"589b55cd-cfb2-43ea-a094-\
2cdbfabab230"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"dataInterp", "=", 
   RowBox[{"Interpolation", "[", 
    RowBox[{"timeSeriesData", ",", 
     RowBox[{"InterpolationOrder", "\[Rule]", "1"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"dataIntegrate", "=", 
   RowBox[{"NIntegrate", "[", 
    RowBox[{
     RowBox[{"dataInterp", "[", "x", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"timeSeriesData", "[", "\"\<FirstTime\>\"", "]"}], ",", 
       RowBox[{"timeSeriesData", "[", "\"\<LastTime\>\"", "]"}]}], "}"}]}], 
    "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.699242761229946*^9, 3.6992428453923264`*^9}, {
  3.770440003036118*^9, 
  3.7704400268912325`*^9}},ExpressionUUID->"33fe77c4-5736-4b8c-b3cb-\
c0077eb72d0e"],

Cell[TextData[StyleBox["Obtain moving/period values",
 FontColor->RGBColor[0.5, 0, 0.5]]], "ItemNumbered",
 CellChangeTimes->{{3.6992426728788495`*^9, 3.6992426862509785`*^9}, {
   3.763269613701214*^9, 3.7632696137017155`*^9}, 3.7632696696533885`*^9, {
   3.776492774361229*^9, 
   3.7764928095452223`*^9}},ExpressionUUID->"0ddc1120-a45a-452b-a73e-\
03571d3d0567"],

Cell["\<\
Done by mapping a function to each slide of time window. 
Example: 
obtain daily sum of a time series (can be multiple columns, in which case \
obtain sum of each column) from first date of the time series to last date, \
with increment of one day. 
when value dimension is more than one, need to output corresponding \
dimensions of Non-output when there is a gap in the data resulting in certain \
windows having no sampled data points. 
timestamp represent the start of a time period (alignment is Left). 
Padding is None, meaning even windows that are incompletely filled will be \
reported as well. \
\>", "Text",
 CellChangeTimes->{{3.776492818801935*^9, 3.776492822288229*^9}, {
  3.776492888266241*^9, 3.776493135908614*^9}, {3.7764939842376857`*^9, 
  3.776494044184112*^9}, {3.7783688119179783`*^9, 
  3.7783688280452456`*^9}},ExpressionUUID->"244de0b6-9f22-4da9-b38f-\
ee6fd0b8cb7b"],

Cell[BoxData[{
 RowBox[{"dailySum", "=", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"dataDimension", "=", 
      RowBox[{"ts", "[", "\"\<ValueDimensions\>\"", "]"}]}], "}"}], ",", 
    RowBox[{"MovingMap", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "@", "#"}], "\[NotEqual]", "0"}], ",", 
         RowBox[{
          RowBox[{"Total", "[", "#", "]"}], "/", "60000"}], ",", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"dataDimension", ">", "1"}], ",", 
           RowBox[{"Table", "[", 
            RowBox[{"Null", ",", "dataDimension"}], "]"}], ",", "Null"}], 
          "]"}]}], "]"}], "&"}], ",", "ts", ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Quantity", "[", 
         RowBox[{"1", ",", "\"\<Days\>\""}], "]"}], ",", "Left", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"DateObject", "[", 
           RowBox[{
            RowBox[{"DateList", "[", 
             RowBox[{"ts", "[", "\"\<FirstTime\>\"", "]"}], "]"}], "[", 
            RowBox[{"[", 
             RowBox[{";;", "3"}], "]"}], "]"}], "]"}], ",", 
          RowBox[{"DateObject", "[", 
           RowBox[{
            RowBox[{"DateList", "[", 
             RowBox[{"ts", "[", "\"\<LastDate\>\"", "]"}], "]"}], "[", 
            RowBox[{"[", 
             RowBox[{";;", "3"}], "]"}], "]"}], "]"}], ",", 
          RowBox[{"Quantity", "[", 
           RowBox[{"1", ",", "\"\<Days\>\""}], "]"}]}], "}"}]}], "}"}], ",", 
      "None"}], "]"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"MovingMap", "[", 
    RowBox[{"function", ",", "ts", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"window", " ", "size"}], ",", "alignment", ",", 
       RowBox[{"window", " ", "placement"}]}], "}"}], ",", "Padding"}]}], 
   "*)"}]}]}], "Input",
 CellChangeTimes->{{3.776492829362745*^9, 3.7764928747230663`*^9}, {
  3.7764931580385942`*^9, 3.7764931596705694`*^9}, {3.7776004454057455`*^9, 
  3.7776004737430754`*^9}, {3.7779373326519504`*^9, 3.7779373573719234`*^9}, {
  3.7779374100312233`*^9, 3.777937422862075*^9}, {3.7779374601299176`*^9, 
  3.7779374766410913`*^9}, {3.7783687936848803`*^9, 
  3.7783687988349533`*^9}},ExpressionUUID->"86a32182-ef3d-4dcf-833b-\
24680c722f75"],

Cell["\<\
To obtain averages, with missing values not counted towards calculations, \
simply map the following function: \
\>", "Text",
 CellChangeTimes->{{3.778368847291215*^9, 
  3.778368876020946*^9}},ExpressionUUID->"274cdcd6-efc0-4dd4-b9b6-\
1f8ef95baebc"],

Cell[BoxData[
 RowBox[{
  RowBox[{"fnAvg", "[", 
   RowBox[{"x_", ",", "d_"}], "]"}], ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Length", "@", "x"}], "\[NotEqual]", "0"}], ",", 
    RowBox[{
     RowBox[{
      RowBox[{"Mean", "@", 
       RowBox[{"Cases", "[", 
        RowBox[{"#", ",", "_Real"}], "]"}]}], "&"}], "/@", 
     RowBox[{"Transpose", "[", "x", "]"}]}], ",", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"d", ">", "1"}], ",", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"Missing", "[", "\"\<DateNotFound\>\"", "]"}], ",", "d"}], 
       "]"}], ",", 
      RowBox[{"Missing", "[", "\"\<DateNotFound\>\"", "]"}]}], "]"}]}], 
   "]"}]}]], "Input",ExpressionUUID->"0ce71b7c-6f62-49a5-9e55-862844c35743"],

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"dataDimension", "=", 
     RowBox[{"ts", "[", "\"\<ValueDimensions\>\"", "]"}]}], "}"}], ",", 
   RowBox[{"MovingMap", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"ReplaceAll", "[", 
       RowBox[{
        RowBox[{"fnAvg", "[", 
         RowBox[{"#", ",", 
          RowBox[{"ts", "[", "\"\<ValueDimensions\>\"", "]"}]}], "]"}], ",", 
        RowBox[{
         RowBox[{"Mean", "[", 
          RowBox[{"{", "}"}], "]"}], "->", 
         RowBox[{"Missing", "[", "\"\<Unmatched\>\"", "]"}]}]}], "]"}], "&"}],
      ",", "ts", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Quantity", "[", 
        RowBox[{"1", ",", "\"\<Days\>\""}], "]"}], ",", "Left", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"DateObject", "[", 
          RowBox[{
           RowBox[{"DateList", "[", 
            RowBox[{"ts", "[", "\"\<FirstTime\>\"", "]"}], "]"}], "[", 
           RowBox[{"[", 
            RowBox[{";;", "3"}], "]"}], "]"}], "]"}], ",", 
         RowBox[{"DateObject", "[", 
          RowBox[{
           RowBox[{"DateList", "[", 
            RowBox[{"ts", "[", "\"\<LastDate\>\"", "]"}], "]"}], "[", 
           RowBox[{"[", 
            RowBox[{";;", "3"}], "]"}], "]"}], "]"}], ",", 
         RowBox[{"Quantity", "[", 
          RowBox[{"1", ",", "\"\<Days\>\""}], "]"}]}], "}"}]}], "}"}], ",", 
     "None"}], "]"}]}], "]"}]], "Input",ExpressionUUID->"da1d7b8d-4059-4170-\
a7c2-81821f80c293"],

Cell["\<\
OR better, do this for each path of a TemporalData. The result can be \
assembled back into a dataset in a table form. \
\>", "Text",
 CellChangeTimes->{{3.7784687098751636`*^9, 
  3.7784687703926935`*^9}},ExpressionUUID->"413ec937-8b6f-42e8-b497-\
982503ce2965"],

Cell[BoxData[
 RowBox[{
  RowBox[{"avgs", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"MovingMap", "[", 
      RowBox[{"Mean", ",", "#", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Quantity", "[", 
          RowBox[{"1", ",", "\"\<Days\>\""}], "]"}], ",", "Left", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"DateList", "[", 
             RowBox[{"td", "[", "\"\<FirstTime\>\"", "]"}], "]"}], "[", 
            RowBox[{"[", 
             RowBox[{";;", "3"}], "]"}], "]"}], ",", 
           RowBox[{
            RowBox[{"DateList", "[", 
             RowBox[{"td", "[", "\"\<LastDate\>\"", "]"}], "]"}], "[", 
            RowBox[{"[", 
             RowBox[{";;", "3"}], "]"}], "]"}], ",", 
           RowBox[{"Quantity", "[", 
            RowBox[{"1", ",", "\"\<Days\>\""}], "]"}]}], "}"}]}], "}"}], ",", 
       "None"}], "]"}], "&"}], "/@", 
    RowBox[{"td", "[", "\"\<DatePaths\>\"", "]"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.778468777275586*^9, 
  3.7784687835434837`*^9}},ExpressionUUID->"1a112f12-b1e0-4276-b628-\
51ef19aacca3"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"avgsTD", "=", 
   RowBox[{"TemporalData", "@", "avgs"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"avgsDataset", "=", 
   RowBox[{
    RowBox[{"Prepend", "[", 
     RowBox[{
      RowBox[{"avgsTD", "[", "\"\<ValueList\>\"", "]"}], ",", 
      RowBox[{"avgsTD", "[", "\"\<Dates\>\"", "]"}]}], "]"}], 
    "\[Transpose]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.778468793843536*^9, 3.778468845455885*^9}, {
  3.7784688872718368`*^9, 3.7784689104577217`*^9}, {3.7784689639602475`*^9, 
  3.7784689663981276`*^9}},ExpressionUUID->"8c8f0dad-02fb-4714-866f-\
b68a3e89388f"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Working with Associations", "Chapter",
 CellChangeTimes->{{3.7257701975750065`*^9, 
  3.725770200863827*^9}},ExpressionUUID->"156e6a64-313f-49b8-a97d-\
b56638b92bea"],

Cell["\<\
Associations can be plotted in DateListPlot with Keys recognized as dates. \
\>", "ItemNumbered",
 CellChangeTimes->{{3.725770412536968*^9, 3.7257704364274397`*^9}, {
  3.7763806684209003`*^9, 
  3.776380668421873*^9}},ExpressionUUID->"0cd285b4-f22f-4ef4-b9f6-\
6d3221ed5f4b"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"assoc", "=", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\"\<2017-4\>\"", "\[Rule]", "121"}], ",", 
     RowBox[{"\"\<2017-5\>\"", "\[Rule]", "121.1"}], ",", 
     RowBox[{"\"\<2017-6\>\"", "\[Rule]", "132.4"}], ",", 
     RowBox[{"\"\<2017-7\>\"", "\[Rule]", "145."}], ",", 
     RowBox[{"\"\<2017-8\>\"", "\[Rule]", "128."}], ",", 
     RowBox[{"\"\<2017-9\>\"", "\[Rule]", "125."}], ",", 
     RowBox[{"\"\<2017-10\>\"", "\[Rule]", "147."}], ",", 
     RowBox[{"\"\<2017-11\>\"", "\[Rule]", "118."}], ",", 
     RowBox[{"\"\<2017-12\>\"", "\[Rule]", "134."}]}], 
    "\[RightAssociation]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"DateListPlot", "[", "assoc", "]"}]}], "Input",
 CellChangeTimes->{{3.725770444066094*^9, 
  3.725770519427227*^9}},ExpressionUUID->"2687e1de-d0b3-4c73-90b8-\
90adb15a2be5"],

Cell[BoxData[
 GraphicsBox[{{}, {{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.012833333333333334`],
      AbsoluteThickness[1.6], 
     LineBox[{{3.6999936*^9, 121.}, {3.7025856*^9, 121.1}, {3.705264*^9, 
      132.4}, {3.707856*^9, 145.}, {3.7105344*^9, 128.}, {3.7132128*^9, 
      125.}, {3.7158048*^9, 147.}, {3.7184832*^9, 118.}, {3.7210752*^9, 
      134.}}]}}, {}, {}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{False, False},
  AxesLabel->{None, None},
  AxesOrigin->{3.6999936*^9, 116.55000000000001`},
  DisplayFunction->Identity,
  Frame->{{True, True}, {True, True}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->
   FrontEndValueCache[{{Automatic, Automatic}, {Charting`FindScaledTicks[
       (Charting`getDateTicks[Automatic, {Automatic}, 
        (Map[DateList, {
          SlotSequence[1]}]& )[
         SlotSequence[1]], None, 5, {{0.0125, 0}, {0.0075, 0}}, Automatic]& )[
        SlotSequence[1]], {Identity, Identity}]& , Charting`ScaledFrameTicks[
       (Charting`getDateTicks[Charting`getDateTicks[Automatic, {Automatic}, 
         (Map[DateList, {
           SlotSequence[1]}]& )[
          SlotSequence[1]], None, 5, {{0.0125, 0}, {0.0075, 0}}, 
         Automatic]& , {Automatic}, 
        (Map[DateList, {
          SlotSequence[1]}]& )[
         SlotSequence[1]], None, 5, {{0.0125, 0}, {0.0075, 0}}, None]& )[
        SlotSequence[1]], {Identity, Identity}]& }}, {{
     Automatic, Automatic}, {{{3.6973152*^9, 
        FormBox["\"Mar\"", TraditionalForm], {0.008333333333333333, 0.}}, {
       3.7025856*^9, 
        FormBox["\"May\"", TraditionalForm], {0.008333333333333333, 0.}}, {
       3.707856*^9, 
        FormBox["\"Jul\"", TraditionalForm], {0.008333333333333333, 0.}}, {
       3.7132128*^9, 
        FormBox["\"Sep\"", TraditionalForm], {0.008333333333333333, 0.}}, {
       3.7184832*^9, 
        FormBox["\"Nov\"", TraditionalForm], {0.008333333333333333, 0.}}, {
       3.7237536*^9, 
        FormBox["\"Jan\"", TraditionalForm], {0.008333333333333333, 0.}}, {
       3.6973152*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 0.}}, {
       3.6999936*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 0.}}, {
       3.7025856*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 0.}}, {
       3.705264*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 0.}}, {
       3.707856*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 0.}}, {
       3.7105344*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 0.}}, {
       3.7132128*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 0.}}, {
       3.7158048*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 0.}}, {
       3.7184832*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 0.}}, {
       3.7210752*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 
        0.}}}, {{3.6973152*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 0.}}, {
       3.7025856*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 0.}}, {
       3.707856*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 0.}}, {
       3.7132128*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 0.}}, {
       3.7184832*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 0.}}, {
       3.7237536*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 0.}}, {
       3.6973152*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 0.}}, {
       3.6999936*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 0.}}, {
       3.7025856*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 0.}}, {
       3.705264*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 0.}}, {
       3.707856*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 0.}}, {
       3.7105344*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 0.}}, {
       3.7132128*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 0.}}, {
       3.7158048*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 0.}}, {
       3.7184832*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 0.}}, {
       3.7210752*^9, 
        FormBox[
         InterpretationBox[
          StyleBox[
           
           GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
            Baseline], "CacheGraphics" -> False], 
          Spacer[{0., 0.}]], TraditionalForm], {0.008333333333333333, 0.}}}}}],
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{3.6999936*^9, 3.7210752*^9}, {118., 147.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{{}, Automatic}]], "Output",
 CellChangeTimes->{{3.7257704658140774`*^9, 3.7257704895476894`*^9}, 
   3.7257705210421667`*^9},ExpressionUUID->"412bf36c-6e97-456e-84f2-\
baa48d8a8f25"]
}, Open  ]],

Cell["\<\
Quick way to convert tables into key value pairs and vice versa. \
\>", "ItemNumbered",
 CellChangeTimes->{{3.725770412536968*^9, 3.7257704364274397`*^9}, {
  3.776380673547595*^9, 3.776380692394929*^9}, {3.7789065707665367`*^9, 
  3.7789065707685423`*^9}},ExpressionUUID->"bbed37ec-92d5-4ae4-9218-\
2f07e47e87bc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Association", "[", 
  RowBox[{"Rule", "@@@", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"key1", ",", "val1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"key2", ",", "val2"}], "}"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7763806996380825`*^9, 3.776380715323823*^9}},
 CellLabel->
  "In[108]:=",ExpressionUUID->"6e7667f9-610f-4fe7-8b98-60fcaee4c0d0"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"key1", "\[Rule]", "val1"}], ",", 
   RowBox[{"key2", "\[Rule]", "val2"}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.7763807163415174`*^9},
 CellLabel->
  "Out[108]=",ExpressionUUID->"8f7dee6c-75c9-4c2b-a416-799bffdb691f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"KeyValueMap", "[", 
  RowBox[{"List", ",", "%"}], "]"}]], "Input",
 CellChangeTimes->{{3.776380724496483*^9, 3.776380732202582*^9}},
 CellLabel->
  "In[109]:=",ExpressionUUID->"ea29082c-cc88-41d6-8f39-8e7391dc145f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"key1", ",", "val1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"key2", ",", "val2"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.77638073345295*^9},
 CellLabel->
  "Out[109]=",ExpressionUUID->"e143a22c-0783-41a5-86ca-770aa047ac98"]
}, Open  ]],

Cell["\<\
Associations cannot contain different values with identical keys.\
\>", "ItemNumbered",
 CellChangeTimes->{{3.725770412536968*^9, 3.7257704364274397`*^9}, {
  3.776380673547595*^9, 3.776380692394929*^9}, {3.7789065942813597`*^9, 
  3.7789066141855464`*^9}, {3.7789067627838926`*^9, 
  3.7789067627849026`*^9}},ExpressionUUID->"2e5c8788-ecf6-4c5d-b692-\
c3e8f486ec60"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"<|", 
  RowBox[{
   RowBox[{"a", "\[Rule]", "1"}], ",", 
   RowBox[{"b", "\[Rule]", "2"}], ",", 
   RowBox[{"a", "\[Rule]", "3"}]}], "|>"}]], "Input",
 CellChangeTimes->{{3.778905622880886*^9, 3.778905638774315*^9}},
 CellLabel->"In[59]:=",ExpressionUUID->"c06c1585-50c6-4f5c-8746-9f1f8703b8b9"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"a", "\[Rule]", "3"}], ",", 
   RowBox[{"b", "\[Rule]", "2"}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.77890563947722*^9},
 CellLabel->"Out[59]=",ExpressionUUID->"316dddef-83ce-414c-815a-349a2ad10c60"]
}, Open  ]],

Cell["\<\
Change values associated with a certain key in a list of associations: \
\>", "ItemNumbered",
 CellChangeTimes->{{3.725770412536968*^9, 3.7257704364274397`*^9}, {
  3.776380673547595*^9, 3.776380692394929*^9}, {3.7789065942813597`*^9, 
  3.7789066141855464`*^9}, {3.7789067973883467`*^9, 
  3.778906824852668*^9}},ExpressionUUID->"31544c72-a560-439f-be75-\
476b66ea4dfd"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"assoclist", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"a", "\[Rule]", "3"}], ",", 
       RowBox[{"b", "\[Rule]", "2"}]}], "\[RightAssociation]"}], ",", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"a", "\[Rule]", "1"}], ",", 
       RowBox[{"b", "\[Rule]", "4"}]}], "\[RightAssociation]"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"assoclist", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", 
      RowBox[{"Key", "@", "a"}]}], "]"}], "]"}], "=", "0"}], 
  ";"}], "\[IndentingNewLine]", "assoclist"}], "Input",
 CellChangeTimes->{{3.77890683288412*^9, 3.7789068752864656`*^9}, {
  3.7789069178382072`*^9, 3.778906928142742*^9}},
 CellLabel->"In[96]:=",ExpressionUUID->"ed23cddc-98bd-42f2-87cd-9cc324aa90f5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"a", "\[Rule]", "0"}], ",", 
     RowBox[{"b", "\[Rule]", "2"}]}], "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"a", "\[Rule]", "0"}], ",", 
     RowBox[{"b", "\[Rule]", "4"}]}], "\[RightAssociation]"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.778906875956294*^9, {3.7789069214358234`*^9, 3.7789069284014325`*^9}, 
   3.7789070326052704`*^9},
 CellLabel->"Out[98]=",ExpressionUUID->"904adeec-de76-4b60-83ee-af2aff759f52"]
}, Open  ]],

Cell["\<\
Alternatively (which can also be used to append key-value pairs to an \
association): \
\>", "Text",
 CellChangeTimes->{{3.7789069795180025`*^9, 3.7789069836460266`*^9}, {
  3.783310904423546*^9, 
  3.7833109197342215`*^9}},ExpressionUUID->"531a2097-d887-4373-a169-\
da3b6b213d29"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"<|", 
    RowBox[{"#", ",", 
     RowBox[{"a", "\[Rule]", "10"}]}], "|>"}], "&"}], "/@", 
  "assoclist"}]], "Input",
 CellChangeTimes->{{3.7789069975839195`*^9, 3.778907025312781*^9}, 
   3.7789070729884543`*^9},
 CellLabel->
  "In[103]:=",ExpressionUUID->"e773c762-dd87-4f28-827d-e197ab297aa6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"a", "\[Rule]", "10"}], ",", 
     RowBox[{"b", "\[Rule]", "2"}]}], "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"a", "\[Rule]", "10"}], ",", 
     RowBox[{"b", "\[Rule]", "4"}]}], "\[RightAssociation]"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.7789070085541935`*^9, 3.7789070743821774`*^9}},
 CellLabel->
  "Out[103]=",ExpressionUUID->"46453295-d25c-4c49-8672-6bdca0e282cc"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Working with datasets", "Chapter",
 CellChangeTimes->{{3.667526516674991*^9, 
  3.6675265399397316`*^9}},ExpressionUUID->"bd95616b-189c-4196-a143-\
2e884c2ec1f9"],

Cell[CellGroupData[{

Cell["Creating datasets", "Subsubsection",
 CellChangeTimes->{{3.670552301890282*^9, 
  3.6705523119986377`*^9}},ExpressionUUID->"4169baa3-103c-4ff6-b2c9-\
8d4a25fc63a9"],

Cell["\<\
Datasets can be created by semantic import, or directly from lists or \
associations:\
\>", "Text",
 CellChangeTimes->{{3.6705523276141343`*^9, 3.6705523446612897`*^9}, {
  3.6705536553948035`*^9, 
  3.6705536604627867`*^9}},ExpressionUUID->"80ac29ae-746b-4251-a349-\
2244da6af24f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"dataset1", "=", 
   RowBox[{"Dataset", "[", "data", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"dataset1", "=", 
   RowBox[{"SemanticImport", "[", "\"\<data.csv\>\"", "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.6705523472904053`*^9, 3.6705523546899834`*^9}, {
  3.7026973455305376`*^9, 
  3.7026973580445423`*^9}},ExpressionUUID->"d9501976-a636-4874-98c7-\
f967585bbf5e"],

Cell[TextData[{
 StyleBox["Tricks for creating keys:",
  FontColor->RGBColor[0.5, 0, 0.5]],
 " \nUse AssociationThread to create associations. Use pure function to apply \
this association to multiple rows (have trouble doing it with its function \
argument):"
}], "ItemNumbered",
 CellChangeTimes->{{3.6705537644576607`*^9, 3.6705538230665064`*^9}, {
   3.6705546012351356`*^9, 3.67055468564143*^9}, 
   3.769983494576783*^9},ExpressionUUID->"b0d56c4b-7377-4f63-9fd0-\
2332e4c6f3b7"],

Cell[BoxData[
 RowBox[{"dataset1", "=", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"AssociationThread", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "\"\<time stamp\>\"", ",", "\"\<col1\>\"", ",", "\"\<col2\>\""}], 
        "}"}], "\[Rule]", "#"}], "]"}], "&"}], "/@", "data"}], "//", 
   "Dataset"}]}]], "Input",
 CellChangeTimes->{{3.670553837629651*^9, 3.670553873139841*^9}, {
  3.6705539062331734`*^9, 3.67055392575311*^9}, {3.6705545717086334`*^9, 
  3.670554590564171*^9}},ExpressionUUID->"886be584-8b1c-4c29-8d47-\
03cebf17926f"],

Cell["\<\
Convert regular tables into dataset with hierarchical row label:\
\>", "ItemNumbered",
 CellChangeTimes->{{3.703992581685192*^9, 3.703992590276699*^9}, {
  3.7039936172820053`*^9, 
  3.7039936276994886`*^9}},ExpressionUUID->"8e5c5488-1e0b-49d7-87fa-\
f652c1bc1f2c"],

Cell[BoxData[
 RowBox[{"dataset2", "=", 
  RowBox[{
   RowBox[{"AssociationThread", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<row key 1\>\"", ",", "\"\<row label 2\>\""}], "}"}], 
       "\[Rule]", 
       RowBox[{"AssociationThread", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "\"\<time stamp\>\"", ",", "\"\<col1\>\"", ",", "\"\<col2\>\""}], 
          "}"}], "\[Rule]", "#"}], "]"}]}], "&"}], "/@", "table"}], "]"}], "//",
    "Dataset"}]}]], "Input",
 CellChangeTimes->{{3.7039926073170877`*^9, 3.703992709863455*^9}, {
  3.703993601668337*^9, 
  3.7039936019323072`*^9}},ExpressionUUID->"1f20a94d-058f-428f-a944-\
3498aa5ecfe9"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Manipulating", "Subsubsection",
 CellChangeTimes->{{3.6705552893572474`*^9, 
  3.670555293925495*^9}},ExpressionUUID->"b8620845-2315-42df-a129-\
9b4633e71525"],

Cell["\<\
datasets can be indexed just like a matrix, but use [ ] to take parts from \
it, and rows & columns can be specified using key name. 
see documentation. \
\>", "Text",
 CellChangeTimes->{{3.667526697941668*^9, 3.66752677631017*^9}, {
  3.6675270882605143`*^9, 3.667527094212556*^9}, {3.6675271513142033`*^9, 
  3.6675271559622993`*^9}},ExpressionUUID->"32c4bbd5-6ed1-49a1-9f4d-\
ef7bb24b1e81"],

Cell["Create new columns (operation on rows):", "ItemNumbered",
 CellChangeTimes->{{3.7026982826611557`*^9, 3.702698289068591*^9}, {
  3.7026983572377014`*^9, 3.702698366698467*^9}, {3.707691646415498*^9, 
  3.7076916466256094`*^9}},ExpressionUUID->"5440303f-82d4-4401-95a5-\
49c3647026a2"],

Cell[BoxData[
 RowBox[{"ds", "[", 
  RowBox[{"All", ",", 
   RowBox[{
    RowBox[{"<|", 
     RowBox[{"#", ",", 
      RowBox[{"\"\<col3\>\"", "\[Rule]", 
       RowBox[{"#col1", "+", "#col2"}]}], ",", 
      RowBox[{"\"\<col4\>\"", "\[Rule]", 
       RowBox[{"#col1", "*", "#col2"}]}]}], "|>"}], "&"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7026982907739563`*^9, 3.7026983009970436`*^9}, 
   3.702945509244919*^9},ExpressionUUID->"e13027c8-0019-4bc2-b4c5-\
0bd54a24e4b5"],

Cell["\<\
One use is to convert time stamp from string to objects.
Use similar technique to rename columns (essentially creating new columns): \
\>", "Text",
 CellChangeTimes->{{3.670557012176995*^9, 3.6705570333309593`*^9}, {
  3.7240473849530935`*^9, 
  3.7240474175608716`*^9}},ExpressionUUID->"aa722f37-db41-4b85-8159-\
222c6e7966bd"],

Cell[BoxData[
 RowBox[{"dataset", "[", 
  RowBox[{"All", ",", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<new col1\>\"", "\[Rule]", "\"\<col1\>\""}], ",", 
     RowBox[{"\"\<new col2\>\"", "\[Rule]", "\"\<col2\>\""}]}], "|>"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.724047430649681*^9, 
  3.7240474618420906`*^9}},ExpressionUUID->"4b43dd59-33f6-46a2-8d78-\
d4d973181baa"],

Cell["\<\
Apply (map) operation on rows/entries of specified \
column(s):\[LineSeparator](also operation on rows)\
\>", "ItemNumbered",
 CellChangeTimes->{{3.7026983120690393`*^9, 3.7026983206198*^9}, {
  3.707691459838703*^9, 3.7076915157602973`*^9}, {3.707691660544278*^9, 
  3.7076916700714197`*^9}},ExpressionUUID->"0375afdf-3b5c-473a-97b3-\
5f08f3a82e69"],

Cell["\<\
pure functions can be applied properly to different keys of datasets by using \
->. \
\>", "Text",
 CellChangeTimes->{
  3.667527149506948*^9, {3.6675299774457507`*^9, 3.6675299936464415`*^9}, {
   3.6675301285276985`*^9, 3.6675301463675337`*^9}, {3.6675308127180614`*^9, 
   3.6675308144873133`*^9}, {3.70417292048341*^9, 
   3.7041729224581623`*^9}},ExpressionUUID->"092c71ee-bc8f-4d93-88e7-\
6b4821ede629"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"dataset1", "[", 
    RowBox[{"All", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\"\<key1\>\"", "\[Rule]", "g"}], ",", 
       RowBox[{
        RowBox[{"\"\<key2\>\"", "\[Rule]", "#"}], "&"}]}], "}"}]}], "]"}], 
   ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"this", " ", "CANNOT", " ", "be", " ", "properly", " ", 
    RowBox[{"evaluated", " ", " ", " ", "!"}]}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"dataset1", "[", 
    RowBox[{"All", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\"\<key1\>\"", "\[Rule]", "g"}], ",", 
       RowBox[{"\"\<key2\>\"", "\[Rule]", 
        RowBox[{"(", 
         RowBox[{"#", "&"}], ")"}]}]}], "}"}]}], "]"}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "make", " ", "sure", " ", "the", " ", "function", " ", "if", " ", 
    "properly", " ", "parenthesized"}], " ", "*)"}]}]}], "Input",
 CellChangeTimes->{{3.667526560703684*^9, 3.6675265610839715`*^9}, {
   3.6675300398567605`*^9, 3.667530080919343*^9}, {3.667530441194174*^9, 
   3.6675304432196083`*^9}, 3.6705523626745477`*^9, {3.6705569532583427`*^9, 
   3.6705569556039762`*^9}, {3.70417292890778*^9, 
   3.704172964643812*^9}},ExpressionUUID->"ade0fb88-a64f-4f93-9d8f-\
ed8a2f966124"],

Cell["All other columns not operated on are still selected. ", "Text",
 CellChangeTimes->{{3.724047478592971*^9, 
  3.7240474908013144`*^9}},ExpressionUUID->"23cc766d-c3f3-479f-b525-\
4349d7331453"],

Cell["\<\
Apply function to extracted column(s):\[LineSeparator](operation on extracted \
columns)\
\>", "ItemNumbered",
 CellChangeTimes->{{3.707691679976791*^9, 3.7076917082333465`*^9}, {
  3.707691843861178*^9, 
  3.707691845146761*^9}},ExpressionUUID->"50c4cbeb-6f98-4c24-8d2f-\
c225a51c6567"],

Cell[BoxData[{
 RowBox[{"dataset", "[", 
  RowBox[{"Total", ",", 
   RowBox[{"{", 
    RowBox[{"\"\<col1\>\"", ",", "\"\<col2\>\""}], "}"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"dataset", "[", 
  RowBox[{"Total", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "cannot", " ", "mix", " ", "names", " ", "and", " ", "number", " ", 
    "index", " ", "of", " ", "columns", " ", "in", " ", "part", " ", 
    RowBox[{"specification", "!"}]}], "*)"}]}]}], "Input",
 CellChangeTimes->{{3.707691712852522*^9, 3.707691727808222*^9}, {
  3.707691795816448*^9, 
  3.7076918248345566`*^9}},ExpressionUUID->"7997c337-3d4e-4004-b18f-\
ae074448d006"],

Cell["Extract and output into lists or tables:", "ItemNumbered",
 CellChangeTimes->{{3.7026983728764744`*^9, 
  3.7026983885831532`*^9}},ExpressionUUID->"ed833a52-5cfc-4e9b-a51d-\
b9398bb71556"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"dataset", "[", 
     RowBox[{"All", ",", 
      RowBox[{"{", 
       RowBox[{"\"\<key1\>\"", ",", "\"\<key2\>\""}], "}"}]}], "]"}], "//", 
    "Normal"}], "//", "Values"}], "\[IndentingNewLine]", 
  RowBox[{"(*", "or", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"dataset", "[", 
   RowBox[{"[", 
    RowBox[{"Values", ",", "Values"}], "]"}], "]"}], "//", 
  "Normal"}]}], "Input",
 CellChangeTimes->{{3.702698956523038*^9, 3.7026989710370913`*^9}, {
  3.7029456194885254`*^9, 3.7029456329460373`*^9}, {3.702945713785659*^9, 
  3.7029457150904727`*^9}},ExpressionUUID->"7c14a3ca-0b0d-4fb1-9b3f-\
2e66c67dfd0d"],

Cell["Delete columns of a dataset:", "ItemNumbered",
 CellChangeTimes->{{3.7026983728764744`*^9, 3.702698381350961*^9}, {
  3.707545574728548*^9, 3.7075455858491344`*^9}, {3.772425235444867*^9, 
  3.772425235444867*^9}},ExpressionUUID->"2b063ddf-049a-40a8-958c-\
eab8236f10b9"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Delete", "[", 
    RowBox[{"#", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"Key", "[", "a", "]"}], "}"}], ",", 
       RowBox[{"{", "\"\<b\>\"", "}"}]}], "}"}]}], "]"}], "&"}], "/@", 
  "dataset"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "delete", " ", "named", " ", "columns", " ", "by", " ", "applying", " ", 
    "the", " ", "operation", " ", "to", " ", "each", " ", "row", " ", "of", 
    " ", "a", " ", "dataset"}], "*)"}]}]}], "Input",
 CellChangeTimes->{{3.7075455660414715`*^9, 3.707545571129003*^9}, {
  3.707691541545905*^9, 3.70769156363234*^9}, {3.77242420207434*^9, 
  3.7724242024045076`*^9}},ExpressionUUID->"53f74e7d-b1cc-4388-bc84-\
38537c7008d6"],

Cell["Group rows: ", "ItemNumbered",
 CellChangeTimes->{{3.7026983728764744`*^9, 3.702698381350961*^9}, {
  3.707545574728548*^9, 3.7075455858491344`*^9}, {3.7724252473650107`*^9, 
  3.772425258614332*^9}},ExpressionUUID->"dc52d446-f7b5-4741-b48a-\
9c10f6702b7e"],

Cell["select rows first, then select columns, then group. ", "Text",
 CellChangeTimes->{{3.7724252679079776`*^9, 
  3.7724252823098764`*^9}},ExpressionUUID->"3f7b8e85-2040-4b57-be6c-\
f52a01f30973"],

Cell[BoxData[
 RowBox[{"dataset", "[", 
  RowBox[{
   RowBox[{"GroupBy", "[", 
    RowBox[{
     RowBox[{"OddQ", "[", "#a", "]"}], "&"}], "]"}], ",", 
   RowBox[{"Select", "[", 
    RowBox[{
     RowBox[{"#a", ">", "2"}], "&"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"\"\<a\>\"", ",", "\"\<b\>\""}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7724252608343315`*^9, 
  3.7724252653573823`*^9}},ExpressionUUID->"3c7056d7-e0bf-425c-ad4e-\
56568e880578"],

Cell["\<\
select rows first,  then group, then apply function to columns. \
\>", "Text",
 CellChangeTimes->{{3.7724252679079776`*^9, 3.7724252823098764`*^9}, {
  3.772425546902591*^9, 
  3.772425559751672*^9}},ExpressionUUID->"1b878115-82c6-48f9-bf4c-\
3592dd908838"],

Cell[BoxData[
 RowBox[{"dataset", "[", 
  RowBox[{
   RowBox[{"GroupBy", "[", 
    RowBox[{
     RowBox[{"OddQ", "[", "#a", "]"}], "&"}], "]"}], ",", 
   RowBox[{"Select", "[", 
    RowBox[{
     RowBox[{"#a", ">", "2"}], "&"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"\"\<a\>\"", "\[Rule]", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"#", "*", "2"}], "&"}], ")"}]}], "}"}]}], "]"}]], "Input",Expre\
ssionUUID->"97cf8e4f-6784-4371-9fcd-6d0d0fc760df"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Merge and extract data", "Subsubsection",
 CellChangeTimes->{{3.670306884015727*^9, 3.6703068905782948`*^9}, {
  3.6703069271352615`*^9, 3.6703069313852882`*^9}, {3.7077107765901284`*^9, 
  3.7077107774570456`*^9}},ExpressionUUID->"88cbd7db-c2de-46f3-95e9-\
7db70c261585"],

Cell["\<\
Join using values of a key (usually column name): convert to associations and \
use JoinAcross. Need to make sure time stamp format are the same. \
\[LineSeparator]Operation needs to convert dataset into associations first \
(by function Normal). \
\>", "ItemNumbered",
 CellChangeTimes->{{3.670542119947464*^9, 3.6705421508524313`*^9}, {
   3.6705591519563503`*^9, 3.6705591703003263`*^9}, 3.670560491602763*^9, {
   3.6718580953488626`*^9, 3.6718580995208197`*^9}, {3.707543546062807*^9, 
   3.707543555030554*^9}, {3.707709787465939*^9, 3.707709799940653*^9}, {
   3.707709961206396*^9, 3.7077099694634113`*^9}, {3.7512401147865353`*^9, 
   3.7512401379862833`*^9}},ExpressionUUID->"75853f3b-aee1-419a-a3fa-\
843bcc45a02f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"JoinAcross", "[", 
     RowBox[{
      RowBox[{"dataset1", "//", "Normal"}], ",", 
      RowBox[{"dataset2", "//", "Normal"}], ",", 
      RowBox[{"Key", "[", "\"\<date\>\"", "]"}], ",", "\"\<Outer\>\"", ",", 
      RowBox[{"KeyCollisionFunction", "\[Rule]", "Right"}]}], "]"}], "//", 
    "Dataset"}], ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"join", " ", "multiple", " ", 
    RowBox[{"datasets", "/", "associations"}]}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"joinedSet", "=", 
  RowBox[{
   RowBox[{"Fold", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"JoinAcross", "[", 
       RowBox[{"#1", ",", "#2", ",", 
        RowBox[{"Key", "[", "\"\<Tm\>\"", "]"}]}], "]"}], "&"}], ",", 
     "assoc1", ",", 
     RowBox[{"{", 
      RowBox[{"assoc2", ",", "assoc3"}], "}"}]}], "]"}], "//", 
   "Dataset"}]}]}], "Input",
 CellChangeTimes->{{3.7075436428324585`*^9, 3.707543646821069*^9}, {
  3.707544277559713*^9, 
  3.70754432734704*^9}},ExpressionUUID->"323e5162-4844-449a-bcac-\
c97a5eb510e5"],

Cell["Join using named rows: ", "ItemNumbered",
 CellChangeTimes->{{3.7077097515247707`*^9, 3.7077097659405165`*^9}, {
  3.707709815071859*^9, 
  3.707709832190962*^9}},ExpressionUUID->"bf665b2b-548f-4161-bc8c-\
38f8b25a1aca"],

Cell[BoxData[
 RowBox[{"Merge", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"dataset1", "//", "Normal"}], ",", 
     RowBox[{"dataset2", "//", "Normal"}]}], "}"}], ",", "Association"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.707709882066532*^9, 
  3.707709885838713*^9}},ExpressionUUID->"06a931a2-4c26-45cb-9a6c-\
903020065e26"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Exporting", "Subsubsection",
 CellChangeTimes->{{3.6705569430110545`*^9, 
  3.670556946523553*^9}},ExpressionUUID->"82f642f3-c951-49be-8485-\
98d7fbbd33ec"],

Cell["\<\
Structured dataset can sometimes be directed exported to .csv file (so far \
seems that other formats don\[CloseCurlyQuote]t work). \
\>", "ItemNumbered",
 CellChangeTimes->{{3.667530458067315*^9, 3.667530488827496*^9}, {
   3.6675305385243025`*^9, 3.667530629260729*^9}, {3.6675320702597685`*^9, 
   3.667532084043725*^9}, {3.6675321255406475`*^9, 3.6675321269566708`*^9}, 
   3.667532566288495*^9, {3.6675328158433905`*^9, 3.6675328413727865`*^9}, {
   3.6675329597981777`*^9, 3.667532995518962*^9}, {3.698381987978236*^9, 
   3.6983820057494864`*^9}, {3.7041742361681914`*^9, 
   3.704174240486248*^9}},ExpressionUUID->"5aa6c7fd-3cb0-4545-b1c1-\
d0e01e3e7742"],

Cell[TextData[{
 "Strings as well as numbers can be included, but datasets with objects or \
nested structures (such as lists) cannot be properly exported. \nBest is to \
reduce them to normal forms, extract values into tables, then export. \nOne \
problem: time is exported not as string, but as time format in excel, it can \
still be imported as string in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ", but may or may not be imported correctly in other programs. "
}], "Text",
 CellChangeTimes->{
  3.698381991847624*^9, {3.7041742559292865`*^9, 
   3.7041742757369237`*^9}},ExpressionUUID->"d683bb75-b1af-4ba9-a595-\
bd9dd8f418bf"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Export", "[", 
    RowBox[{"\"\<data01.csv\>\"", ",", "dataSet1", ",", "\"\<CSV\>\""}], 
    "]"}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "actually", " ", "specification", " ", "of", " ", "\"\<CSV\>\"", " ", "is",
     " ", "not", " ", "needed", " ", "here"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Export", "[", 
   RowBox[{"\"\<data01.dat\>\"", ",", "dataSet1"}], "]"}], ";"}]}], "Input",
 CellChangeTimes->{{3.6675321033966646`*^9, 3.6675321108760552`*^9}, 
   3.6705523668620586`*^9, {3.6838505465735607`*^9, 3.6838505815366554`*^9}, {
   3.6840404478177013`*^9, 
   3.684040470378831*^9}},ExpressionUUID->"402e2eb2-9337-4530-839f-\
ce8bc6e45ecd"],

Cell["\<\
To export datasets with date objects, convert them to string first (usually \
time stamp is the first element in the lists):\[LineSeparator]Exporting to \
local disks is generally faster. \
\>", "ItemNumbered",
 CellChangeTimes->{{3.6869723717531185`*^9, 3.6869723883159513`*^9}, {
  3.6869724253929214`*^9, 3.6869724435732336`*^9}, {3.698383337725261*^9, 
  3.69838336197081*^9}},ExpressionUUID->"30953e87-827b-402f-820c-\
f526a555e454"],

Cell[BoxData[
 RowBox[{"Export", "[", 
  RowBox[{
   RowBox[{"FileNameJoin", "[", 
    RowBox[{"{", 
     RowBox[{"$UserDocumentsDirectory", ",", "\"\<dataset.csv\>\""}], "}"}], 
    "]"}], ",", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"MapAt", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"DateString", "[", 
          RowBox[{"#", ",", 
           RowBox[{"{", 
            RowBox[{
            "\"\<Day\>\"", ",", "\"\</\>\"", ",", "\"\<Month\>\"", ",", 
             "\"\</\>\"", ",", "\"\<Year\>\"", ",", "\"\< \>\"", ",", 
             "\"\<Hour\>\"", ",", "\"\<:\>\"", ",", "\"\<Minute\>\""}], 
            "}"}]}], "]"}], "&"}], ",", "#", ",", "1"}], "]"}], "&"}], ",", 
     "data"}], "]"}], ",", "\"\<CSV\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.686972398574005*^9, 3.686972406064432*^9}, {
  3.6871638491221046`*^9, 3.6871638543722577`*^9}, {3.698383146756522*^9, 
  3.698383150449667*^9}},ExpressionUUID->"b06400f7-6bc2-43ec-b939-\
e1079e161626"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Misc.", "Subsubsection",
 CellChangeTimes->{{3.7076925685308604`*^9, 
  3.7076925692223387`*^9}},ExpressionUUID->"9a063a62-805e-48e1-97aa-\
d6ebac02a0d3"],

Cell["\<\
When using specialized forms of query (e.g. dataset[All, f]), function within \
\[OpenCurlyDoubleQuote][ ]\[CloseCurlyDoubleQuote] applies to extracted \
associations from each row of the dataset (in the form of associations, \
unless each row contains another dataset object), so not in the form of \
datasets. So operations like below will not work: \
\>", "ItemNumbered",
 CellChangeTimes->{{3.7076927051195173`*^9, 3.7076927364919186`*^9}, {
  3.7076933341684*^9, 3.7076933501933093`*^9}, {3.7076941699577417`*^9, 
  3.7076942170031023`*^9}, {3.707694268324147*^9, 3.707694440273823*^9}, {
  3.707694553695569*^9, 
  3.707694592314161*^9}},ExpressionUUID->"32d1869c-e101-4f62-b6ac-\
9fd1ab8f55ea"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"dataset", "[", 
   RowBox[{"All", ",", 
    RowBox[{
     RowBox[{"#", "[", 
      RowBox[{"Total", ",", "\"\<col1\>\""}], "]"}], "&"}]}], "]"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"instead", ",", " ", 
    RowBox[{
    "should", " ", "be", " ", "written", " ", "as", " ", "below", " ", "if", 
     " ", "really", " ", "want", " ", "to", " ", "use", " ", "dataset", " ", 
     "operations", " ", "on", " ", "each", " ", "row", " ", 
     RowBox[{"entry", ":"}]}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"dataset", "[", 
   RowBox[{"All", ",", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"Dataset", "[", "#", "]"}], "[", 
        RowBox[{"Total", ",", "\"\<col1\>\""}], "]"}], "//", "Normal"}], 
      ")"}], "&"}]}], "]"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
   "or", " ", "just", " ", "construct", " ", "a", " ", "new", " ", "dataset", 
    " ", "directly"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"dataset", "[", 
  RowBox[{"All", ",", 
   RowBox[{
    RowBox[{"<|", 
     RowBox[{"\"\<col1\>\"", "\[Rule]", 
      RowBox[{"Total", "[", 
       RowBox[{"#", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", "\"\<col1\>\""}], "]"}], "]"}], "]"}]}], "|>"}], 
    "&"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.70769444909972*^9, 3.70769453588408*^9}, {
  3.707696344883726*^9, 
  3.7076964205170727`*^9}},ExpressionUUID->"e6df591a-ed1a-42e3-93c2-\
e2bd0a842c17"],

Cell["\<\
Acceptable forms of referral to named items in pure function form:\
\[LineSeparator]note: needs to make sure the # being referred to is an \
association, NOT a dataset, otherwise referral may not work properly. \
\>", "ItemNumbered",
 CellChangeTimes->{{3.7076927051195173`*^9, 3.7076927364919186`*^9}, {
  3.7076933341684*^9, 3.7076933501933093`*^9}, {3.7076941699577417`*^9, 
  3.7076942170031023`*^9}, {3.707694268324147*^9, 
  3.7076942764265223`*^9}},ExpressionUUID->"606a33ee-1b57-46b0-b996-\
6a1f051f9ac5"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"<|", 
    RowBox[{"#", ",", 
     RowBox[{"\"\<col3\>\"", "\[Rule]", 
      RowBox[{"(", 
       RowBox[{"#\"col_1\"", "/", "#\"col_2\""}], ")"}]}]}], "|>"}], "&"}], 
  " ", 
  RowBox[{"(*", 
   RowBox[{"no", " ", "space", " ", "within", " ", "the", " ", "strings"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"<|", 
   RowBox[{"#", ",", 
    RowBox[{"\"\<col3\>\"", "\[Rule]", 
     RowBox[{"#col1", "+", "#col2"}]}]}], "|>"}], 
  "&"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"<|", 
    RowBox[{"#", ",", 
     RowBox[{"\"\<col3\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{"#", "[", "\"\<col 1\>\"", "]"}], "+", 
       RowBox[{"#", "[", "\"\<col 2\>\"", "]"}]}]}]}], "|>"}], "&"}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "for", " ", "those", " ", "column", " ", "names", " ", "with", " ", 
    "space", " ", "inside"}], "*)"}]}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.707692758970898*^9, 3.707692794442651*^9}, {
  3.707693317988521*^9, 3.707693320701747*^9}, {3.707693354433604*^9, 
  3.707693457992357*^9}},ExpressionUUID->"f458fc76-eadd-488a-98aa-\
760a9f70a1fe"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Working with SQL database", "Chapter",
 CellChangeTimes->{{3.712878223488418*^9, 
  3.712878228440694*^9}},ExpressionUUID->"cb6cc509-b0d1-44b5-8e82-\
4cda301b12c8"],

Cell[CellGroupData[{

Cell["Basics", "Section",
 CellChangeTimes->{{3.71287825061664*^9, 3.712878251945052*^9}, {
  3.7128783929378977`*^9, 
  3.7128783937535906`*^9}},ExpressionUUID->"d6b0f03d-7f9f-40da-8cad-\
9a8b32551782"],

Cell[TextData[StyleBox["Connect to database on local machine: ",
 FontColor->RGBColor[0.5, 0, 0.5]]], "ItemNumbered",
 CellChangeTimes->{{3.7076927051195173`*^9, 3.7076927364919186`*^9}, {
  3.7076933341684*^9, 3.7076933501933093`*^9}, {3.7076941699577417`*^9, 
  3.7076942170031023`*^9}, {3.707694268324147*^9, 3.707694440273823*^9}, {
  3.707694553695569*^9, 3.707694592314161*^9}, {3.7128784082502904`*^9, 
  3.7128784265078955`*^9}},ExpressionUUID->"63e7cc1e-bc87-468d-8654-\
e1ebf0e96ccc"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Needs", "[", "\"\<DatabaseLink`\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"conn", "=", 
  RowBox[{"OpenSQLConnection", "[", 
   RowBox[{
    RowBox[{"JDBC", "[", 
     RowBox[{"\"\<MySQL(Connector/J)\>\"", ",", "\"\<localhost/testdb\>\""}], 
     "]"}], ",", 
    RowBox[{"\"\<Username\>\"", "\[Rule]", "\"\<root\>\""}], ",", 
    RowBox[{"\"\<Password\>\"", "\[Rule]", "\"\<data@work.88\>\""}]}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.712877964739867*^9, 3.7128779837976303`*^9}, {
  3.712878259560997*^9, 
  3.7128782750263453`*^9}},ExpressionUUID->"000dd1d4-fccc-44ce-87be-\
4814b48b31d5"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["SQLConnection",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}]], 
         GraphicsBox[
          {Thickness[0.0625], 
           {FaceForm[{RGBColor[0.5, 0.5, 0.5], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.236999999999998`, 15.07}, {
             11.078, 17.829}, {11.078, 15.975000000000001`}, {1.625, 
             15.975000000000001`}, {1.625, 14.165000000000001`}, {11.078, 
             14.165000000000001`}, {11.078, 12.31}, {15.236999999999998`, 
             15.07}}}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0., 9.792}, {4.159, 7.033}, {
             4.159, 8.887}, {13.612, 8.887}, {13.612, 10.697}, {4.159, 
             10.697}, {4.159, 12.551}, {0., 9.792}}}], 
            FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
             3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
              3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
             1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
             3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1,
              0}}}, CompressedData["
1:eJxdVGtIFFEU3sfsuO7DnV1FpOyp9CREQnpI3E/KwkJFCwmRMimo6EWYWUQR
ElIhEiIREiZlYYhFREiFiUSWPyzSEFMxk8hSy9VMzV1r7rmz90cDd2e+2Xu/
c853vjNLCo5nH7CaTCazvtL1ZdFXTeqTiWCnFbsGa6teLp5mH4q/LUu0K7DX
x+buT55kyf2ZZdePKfjEb74J5ui6fWKTw4bu9qmdg7V+diUl/8u7pSqQtOdp
musHO/y8sCJGsaN35rz+OMyIrt4hcV+8erFys0vi8pbJFXnlbqzM408jBo7A
2L1XO9ZdHmWNCy8NZ63XENWwbeBs1BiLUXIi1jzS8CzNZVldOi7xdx4m9rfE
B6+NnmNJ04yztZzSoG+O7m6fYSa6NOzTs+6Z+cMEr8fgD7C3vKwqN6hsX5Dd
oMuJkSyeSZBVUAA7dBF0Jf4ywatA273h8esiEx6c5JEt8JU0t9Wkmg0dzfgV
7NSlsGCO3xLnDF4r7vvfpxdoARZNgtokFnmGSyz65MSL6nkJffFz7E1Rk/4U
YehmFnqFa6DwzIqtfPu0hgV69P5M1cjXC9qe55CY0m5yS0z1ZGgQ8b2Yn8A7
5gW1MVaD0Ndn1BuBbGpQJET+TvCupeRHQn+p/2PHWro0ie/wQHEahK8c4G64
esSDAiJ0guzV5QaFrXQZ711YRARukAzFTgTquDBu0PGv4RJPkM52iclOLSqE
b92gdBttWM7LyXXhDBWmgLPM1jmN8wrSKbBDYtKzOFxisnmOHVvonGL0PczQ
xwb+e/OnasRRIXytgruqpDnMmDdV5r+Rt6Haho80Fx7EUt8U3NV3PRzXjD5Z
Rf96vdhL/rVgFbffaR/E3FlAaR4K6W9CkOvwORJxPZw4wEKYxid6SmLhEz87
qlfjz45EGxluiIk58qGV+jrAttM5L4iusMOYdw9ofBpamajbIXFI/xAWOllR
SobpYBeIwAzh5wEm/BBkGaT/ELvF7a7OMkqvzC9x6Hv1//frHzIjGf8=
             "]], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 
             3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
              3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {0, 1, 0}, {0, 1, 
             0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
              3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
             3}}}, CompressedData["
1:eJxlUwlIVGEQ3ix1tS03E1ncdfe9XTMrQ4LEImTGLELCUIswCRG7zKIyOuzQ
EjMxibKwQ5FOC0miItM0wsrMpMITsZQos7I8E++j3sy+fQX9sPv43v9mvplv
vhFjd0dsmapSqeykn1l+Hot/su98pICvDzy94uHXBRMNiR3eCQLmXKbTBQEZ
QTHtZwX8PlbQVxfaDb7p7s3vigWkx9DaHri+8lH/RIMJXwz4bDzzfAB2SOl0
FQIepHSt4xBRYkz7mSXiGz6DoJu2fubCB6J8PwybtJFLH1aJeKjDe5G6cBT8
Wr0cUhpFrA+NlW7GobifKhKxNERjtyB9Ep5VX5MYReQ0eSq04XnE7mOnYKIN
L7HHk9K/8aWIXGaiGimqZ5uIuRXCvb1xzjjHISU7eLqIv+qIUINhpy/uck0V
kOsOn4Hr2vJzK66aFLyE9AgzKtg1tVxi9MRxkidWg0yfZMATxJvmjHFZXUeh
SI8rMnd+GytQy3F6LDREbV720V7BtvptmNRtyx+Dz4fd7q76pMeEQOemG3sG
4GuN+cPIpAGll9JNHzzmPj2R3yd3A8t0wYh3qBxtJ/B8L5kUHNNOH/7FrLuv
gLdYEPn7f/xA6dw3WJDzug8B9+NvkfXsBz0NbIpFju8FJ2qszIzHKY+uE6Sh
GqJuWvAtz78FyijRKzOq5MM+qrf5oQWSwD+6NENENQvUBD23K1cHhIhItsgO
roeRZCnxbBEH2W41cv8CnqOyoqvhfh5FCMg86ZVQVCU1kmNSMKkYeMpTwVb/
6pHTGBshO1ga1BEPrCU547/AXGrgvQ65PK9e6KV6nHTIcjQPK9g2PxsuZyM4
ynPWyfuisfot0wOp2tIQF6wjnh96DOLBaGVfeyKv0/5Zsg9MCua9bBYUvJ39
JVp9U6tFXpetZnRjg7jgGlqjxRa5Pw0uJ55cC87nghwVLKkiSWOnYCvvb+Cw
NAta93D0Pz/8AU7U7cs=
             "]]}, 
           {FaceForm[{RGBColor[0.5, 0.5, 0.5], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}}}, {{{11.039, 4.245}, {11.866000000000001`, 
             4.245}, {11.866000000000001`, 0.998}, {13.842, 0.998}, {13.842, 
             0.28600000000000003`}, {11.039, 0.28600000000000003`}, {11.039, 
             4.245}}}]}},
          AspectRatio->1,
          Axes->False,
          Background->GrayLevel[0.93],
          Frame->True,
          FrameStyle->Directive[
            Thickness[Tiny], 
            GrayLevel[0.7]],
          FrameTicks->None,
          ImageSize->{Automatic, 
            Dynamic[
            3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])]},
          PlotRangePadding->4], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Name: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["None",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["2",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              StyleBox["\<\"Open\"\>",
               StripOnInput->False,
               LineColor->GrayLevel[0],
               FrontFaceColor->GrayLevel[0],
               BackFaceColor->GrayLevel[0],
               GraphicsColor->GrayLevel[0],
               FontWeight->Bold,
               FontColor->GrayLevel[0]],
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"Catalog: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"testdb\"\>",
              "SummaryItem"]}]}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquareMinusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 
             3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])}]], 
         GraphicsBox[
          {Thickness[0.0625], 
           {FaceForm[{RGBColor[0.5, 0.5, 0.5], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.236999999999998`, 15.07}, {
             11.078, 17.829}, {11.078, 15.975000000000001`}, {1.625, 
             15.975000000000001`}, {1.625, 14.165000000000001`}, {11.078, 
             14.165000000000001`}, {11.078, 12.31}, {15.236999999999998`, 
             15.07}}}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0., 9.792}, {4.159, 7.033}, {
             4.159, 8.887}, {13.612, 8.887}, {13.612, 10.697}, {4.159, 
             10.697}, {4.159, 12.551}, {0., 9.792}}}], 
            FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
             3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
              3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
             1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
             3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1,
              0}}}, CompressedData["
1:eJxdVGtIFFEU3sfsuO7DnV1FpOyp9CREQnpI3E/KwkJFCwmRMimo6EWYWUQR
ElIhEiIREiZlYYhFREiFiUSWPyzSEFMxk8hSy9VMzV1r7rmz90cDd2e+2Xu/
c853vjNLCo5nH7CaTCazvtL1ZdFXTeqTiWCnFbsGa6teLp5mH4q/LUu0K7DX
x+buT55kyf2ZZdePKfjEb74J5ui6fWKTw4bu9qmdg7V+diUl/8u7pSqQtOdp
musHO/y8sCJGsaN35rz+OMyIrt4hcV+8erFys0vi8pbJFXnlbqzM408jBo7A
2L1XO9ZdHmWNCy8NZ63XENWwbeBs1BiLUXIi1jzS8CzNZVldOi7xdx4m9rfE
B6+NnmNJ04yztZzSoG+O7m6fYSa6NOzTs+6Z+cMEr8fgD7C3vKwqN6hsX5Dd
oMuJkSyeSZBVUAA7dBF0Jf4ywatA273h8esiEx6c5JEt8JU0t9Wkmg0dzfgV
7NSlsGCO3xLnDF4r7vvfpxdoARZNgtokFnmGSyz65MSL6nkJffFz7E1Rk/4U
YehmFnqFa6DwzIqtfPu0hgV69P5M1cjXC9qe55CY0m5yS0z1ZGgQ8b2Yn8A7
5gW1MVaD0Ndn1BuBbGpQJET+TvCupeRHQn+p/2PHWro0ie/wQHEahK8c4G64
esSDAiJ0guzV5QaFrXQZ711YRARukAzFTgTquDBu0PGv4RJPkM52iclOLSqE
b92gdBttWM7LyXXhDBWmgLPM1jmN8wrSKbBDYtKzOFxisnmOHVvonGL0PczQ
xwb+e/OnasRRIXytgruqpDnMmDdV5r+Rt6Haho80Fx7EUt8U3NV3PRzXjD5Z
Rf96vdhL/rVgFbffaR/E3FlAaR4K6W9CkOvwORJxPZw4wEKYxid6SmLhEz87
qlfjz45EGxluiIk58qGV+jrAttM5L4iusMOYdw9ofBpamajbIXFI/xAWOllR
SobpYBeIwAzh5wEm/BBkGaT/ELvF7a7OMkqvzC9x6Hv1//frHzIjGf8=
             "]], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 
             3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
              3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {0, 1, 0}, {0, 1, 
             0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
              3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
             3}}}, CompressedData["
1:eJxlUwlIVGEQ3ix1tS03E1ncdfe9XTMrQ4LEImTGLELCUIswCRG7zKIyOuzQ
EjMxibKwQ5FOC0miItM0wsrMpMITsZQos7I8E++j3sy+fQX9sPv43v9mvplv
vhFjd0dsmapSqeykn1l+Hot/su98pICvDzy94uHXBRMNiR3eCQLmXKbTBQEZ
QTHtZwX8PlbQVxfaDb7p7s3vigWkx9DaHri+8lH/RIMJXwz4bDzzfAB2SOl0
FQIepHSt4xBRYkz7mSXiGz6DoJu2fubCB6J8PwybtJFLH1aJeKjDe5G6cBT8
Wr0cUhpFrA+NlW7GobifKhKxNERjtyB9Ep5VX5MYReQ0eSq04XnE7mOnYKIN
L7HHk9K/8aWIXGaiGimqZ5uIuRXCvb1xzjjHISU7eLqIv+qIUINhpy/uck0V
kOsOn4Hr2vJzK66aFLyE9AgzKtg1tVxi9MRxkidWg0yfZMATxJvmjHFZXUeh
SI8rMnd+GytQy3F6LDREbV720V7BtvptmNRtyx+Dz4fd7q76pMeEQOemG3sG
4GuN+cPIpAGll9JNHzzmPj2R3yd3A8t0wYh3qBxtJ/B8L5kUHNNOH/7FrLuv
gLdYEPn7f/xA6dw3WJDzug8B9+NvkfXsBz0NbIpFju8FJ2qszIzHKY+uE6Sh
GqJuWvAtz78FyijRKzOq5MM+qrf5oQWSwD+6NENENQvUBD23K1cHhIhItsgO
roeRZCnxbBEH2W41cv8CnqOyoqvhfh5FCMg86ZVQVCU1kmNSMKkYeMpTwVb/
6pHTGBshO1ga1BEPrCU547/AXGrgvQ65PK9e6KV6nHTIcjQPK9g2PxsuZyM4
ynPWyfuisfot0wOp2tIQF6wjnh96DOLBaGVfeyKv0/5Zsg9MCua9bBYUvJ39
JVp9U6tFXpetZnRjg7jgGlqjxRa5Pw0uJ55cC87nghwVLKkiSWOnYCvvb+Cw
NAta93D0Pz/8AU7U7cs=
             "]]}, 
           {FaceForm[{RGBColor[0.5, 0.5, 0.5], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}}}, {{{11.039, 4.245}, {11.866000000000001`, 
             4.245}, {11.866000000000001`, 0.998}, {13.842, 0.998}, {13.842, 
             0.28600000000000003`}, {11.039, 0.28600000000000003`}, {11.039, 
             4.245}}}]}},
          AspectRatio->1,
          Axes->False,
          Background->GrayLevel[0.93],
          Frame->True,
          FrameStyle->Directive[
            Thickness[Tiny], 
            GrayLevel[0.7]],
          FrameTicks->None,
          ImageSize->{Automatic, 
            Dynamic[
            3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
              Magnification])]},
          PlotRangePadding->4], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Name: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["None",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["2",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              StyleBox["\<\"Open\"\>",
               StripOnInput->False,
               LineColor->GrayLevel[0],
               FrontFaceColor->GrayLevel[0],
               BackFaceColor->GrayLevel[0],
               GraphicsColor->GrayLevel[0],
               FontWeight->Bold,
               FontColor->GrayLevel[0]],
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"Catalog: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"testdb\"\>",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Description: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"\"\>",
              "SummaryItem"]}], ""},
           {
            RowBox[{
             TagBox["\<\"Location: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"\"\>",
              "SummaryItem"]}], ""},
           {
            RowBox[{
             TagBox["\<\"ReadOnly: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["False",
              "SummaryItem"]}], ""},
           {
            RowBox[{
             TagBox["\<\"RelativePath: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["False",
              "SummaryItem"]}], ""},
           {
            RowBox[{
             TagBox["\<\"TransactionIsolationLevel: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"RepeatableRead\"\>",
              "SummaryItem"]}], ""},
           {
            RowBox[{
             TagBox["\<\"UseConnectionPool: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["Automatic",
              "SummaryItem"]}], ""},
           {
            RowBox[{
             TagBox["\<\"Version: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"\"\>",
              "SummaryItem"]}], ""}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  DatabaseLink`SQLConnection[
   DatabaseLink`JDBC["MySQL(Connector/J)", "localhost/testdb"], 
   JLink`Objects`vm1`JavaObject9255084835733505, 2, "Catalog" -> Automatic, 
   "Description" -> None, "Location" -> None, "Name" -> None, "Password" -> 
   "data@work.88", "Properties" -> {}, "ReadOnly" -> Automatic, 
   "RelativePath" -> False, "TransactionIsolationLevel" -> Automatic, 
   "UseConnectionPool" -> Automatic, "Username" -> "root", "Version" -> None],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.7128785534113407`*^9},ExpressionUUID->"70ed271b-f3d6-4141-ae00-\
54e89de17c94"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"conn", "=", 
  RowBox[{"OpenSQLConnection", "[", 
   RowBox[{"JDBC", "[", 
    RowBox[{
    "\"\<Microsoft Access(UCanAccess)\>\"", ",", "\"\<testdb.accdb\>\""}], 
    "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.783135613562272*^9, 
  3.7831356248349867`*^9}},ExpressionUUID->"f4ccd9ec-80a0-4b8c-b5d5-\
645b43edb788"],

Cell["Close database connection after use: ", "Text",
 CellChangeTimes->{{3.783135589976271*^9, 
  3.783135596675352*^9}},ExpressionUUID->"184d704d-55aa-420f-9950-\
02de9a00e3b3"],

Cell[BoxData[
 RowBox[{"CloseSQLConnection", "[", "conn", "]"}]], "Input",
 CellChangeTimes->{{3.7831355841257744`*^9, 
  3.7831355852811737`*^9}},ExpressionUUID->"4cf92cee-0ca1-46bc-9959-\
691ce9e27598"],

Cell[TextData[StyleBox["Inspection:",
 FontColor->RGBColor[0.5, 0, 0.5]]], "ItemNumbered",
 CellChangeTimes->{{3.7076927051195173`*^9, 3.7076927364919186`*^9}, {
  3.7076933341684*^9, 3.7076933501933093`*^9}, {3.7076941699577417`*^9, 
  3.7076942170031023`*^9}, {3.707694268324147*^9, 3.707694440273823*^9}, {
  3.707694553695569*^9, 3.707694592314161*^9}, {3.7128784082502904`*^9, 
  3.7128784471621513`*^9}},ExpressionUUID->"9485621a-47c0-4992-ad1b-\
d150e5a47d88"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SQLTables", "[", "conn", "]"}]], "Input",ExpressionUUID->"27e93570-6207-4752-b925-dd74dac8f129"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"SQLTable", "[", 
   RowBox[{"\<\"students\"\>", ",", 
    RowBox[{"\<\"TableType\"\>", "\[Rule]", "\<\"BASE TABLE\"\>"}]}], "]"}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.712878459572208*^9},ExpressionUUID->"47e6e746-8bb5-4ef0-bc66-\
5afe38642d57"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SQLColumns", "[", 
  RowBox[{"conn", ",", "\"\<students\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.712878500486019*^9, 
  3.7128785064511104`*^9}},ExpressionUUID->"d79a6c46-d5fc-49fd-831f-\
099b09382a9f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"SQLColumn", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\<\"students\"\>", ",", "\<\"ID\"\>"}], "}"}], ",", 
     RowBox[{"\<\"DataTypeName\"\>", "\[Rule]", "\<\"INT\"\>"}], ",", 
     RowBox[{"\<\"DataLength\"\>", "\[Rule]", "10"}], ",", 
     RowBox[{"\<\"Default\"\>", "\[Rule]", "Null"}], ",", 
     RowBox[{"\<\"Nullable\"\>", "\[Rule]", "0"}]}], "]"}], ",", 
   RowBox[{"SQLColumn", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\<\"students\"\>", ",", "\<\"firstName\"\>"}], "}"}], ",", 
     RowBox[{"\<\"DataTypeName\"\>", "\[Rule]", "\<\"VARCHAR\"\>"}], ",", 
     RowBox[{"\<\"DataLength\"\>", "\[Rule]", "20"}], ",", 
     RowBox[{"\<\"Default\"\>", "\[Rule]", "Null"}], ",", 
     RowBox[{"\<\"Nullable\"\>", "\[Rule]", "0"}]}], "]"}], ",", 
   RowBox[{"SQLColumn", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\<\"students\"\>", ",", "\<\"lName\"\>"}], "}"}], ",", 
     RowBox[{"\<\"DataTypeName\"\>", "\[Rule]", "\<\"VARCHAR\"\>"}], ",", 
     RowBox[{"\<\"DataLength\"\>", "\[Rule]", "45"}], ",", 
     RowBox[{"\<\"Default\"\>", "\[Rule]", "Null"}], ",", 
     RowBox[{"\<\"Nullable\"\>", "\[Rule]", "1"}]}], "]"}], ",", 
   RowBox[{"SQLColumn", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\<\"students\"\>", ",", "\<\"class\"\>"}], "}"}], ",", 
     RowBox[{"\<\"DataTypeName\"\>", "\[Rule]", "\<\"VARCHAR\"\>"}], ",", 
     RowBox[{"\<\"DataLength\"\>", "\[Rule]", "45"}], ",", 
     RowBox[{"\<\"Default\"\>", "\[Rule]", "Null"}], ",", 
     RowBox[{"\<\"Nullable\"\>", "\[Rule]", "1"}]}], "]"}], ",", 
   RowBox[{"SQLColumn", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\<\"students\"\>", ",", "\<\"age\"\>"}], "}"}], ",", 
     RowBox[{"\<\"DataTypeName\"\>", "\[Rule]", "\<\"INT UNSIGNED\"\>"}], ",", 
     RowBox[{"\<\"DataLength\"\>", "\[Rule]", "10"}], ",", 
     RowBox[{"\<\"Default\"\>", "\[Rule]", "Null"}], ",", 
     RowBox[{"\<\"Nullable\"\>", "\[Rule]", "1"}]}], "]"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.7128785071025276`*^9},ExpressionUUID->"4c8a9bcd-6592-4fc2-b7d6-\
8dc6d22daad7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"SQLSelect", "[", 
   RowBox[{"conn", ",", "\"\<students\>\""}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SQLSelect", "[", 
   RowBox[{"conn", ",", "\"\<students\>\"", ",", 
    RowBox[{"\"\<ShowColumnHeadings\>\"", "\[Rule]", "True"}]}], "]"}], "//", 
  "TableForm"}]}], "Input",
 CellChangeTimes->{{3.712878525871312*^9, 3.712878529907644*^9}, {
   3.7128785747632895`*^9, 3.7128785853000126`*^9}, 
   3.7128883307846947`*^9},ExpressionUUID->"d60976e0-1ed2-47c0-9375-\
fa46cfd747d1"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"ID\"\>", "\<\"firstName\"\>", "\<\"lName\"\>", "\<\"class\"\>", "\<\
\"age\"\>"},
    {"1", "\<\"adam\"\>", "\<\"b\"\>", "\<\"c\"\>", "19"},
    {"2", "\<\"da\"\>", "\<\"db\"\>", "\<\"s33\"\>", "22"},
    {"3", "\<\"tess\"\>", "\<\"bahh\"\>", "\<\"physic\"\>", "24"},
    {"4", "\<\"<tess>\"\>", "\<\"bahh\"\>", "\<\"physics\"\>", "21"}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.712878537451661*^9, 3.7128785871357975`*^9, 
  3.7128883364005613`*^9},ExpressionUUID->"226c0971-ff7c-447b-8165-\
b5fdfaf315b6"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"SQLExecute", "[", 
  RowBox[{"conn", ",", "\"\<SELECT `1` FROM `2`\>\"", ",", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"SQLArgument", "[", 
      RowBox[{
       RowBox[{"SQLColumn", "[", "\"\<firstName\>\"", "]"}], ",", 
       RowBox[{"SQLColumn", "[", "\"\<lName\>\"", "]"}], ",", 
       RowBox[{"SQLColumn", "[", "\"\<age\>\"", "]"}]}], "]"}], ",", " ", 
     RowBox[{"SQLTable", "[", "\"\<students\>\"", "]"}]}], "}"}]}], 
  "]"}]], "Input",ExpressionUUID->"88045fb3-c743-4ef8-89d2-243cbb1d3090"],

Cell[TextData[StyleBox["Make changes (these operations support batch mode for \
faster operation, insert multiple entries by passing a list of list):",
 FontColor->RGBColor[0.5, 0, 0.5]]], "ItemNumbered",
 CellChangeTimes->{{3.7076927051195173`*^9, 3.7076927364919186`*^9}, {
  3.7076933341684*^9, 3.7076933501933093`*^9}, {3.7076941699577417`*^9, 
  3.7076942170031023`*^9}, {3.707694268324147*^9, 3.707694440273823*^9}, {
  3.707694553695569*^9, 3.707694592314161*^9}, {3.7128784082502904`*^9, 
  3.7128784471621513`*^9}, {3.71288852301713*^9, 3.712888524305111*^9}, {
  3.7135761854475775`*^9, 
  3.7135762669991894`*^9}},ExpressionUUID->"55f4465f-49f1-488e-a276-\
b2acaef7b945"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SQLInsert", "[", 
   RowBox[{"conn", ",", "\"\<students\>\"", ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<firstName\>\"", ",", "\"\<lName\>\"", ",", "\"\<class\>\"", ",", 
      "\"\<age\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<adam\>\"", ",", "\"\<puu\>\"", ",", "\"\<Day6\>\"", ",", "29"}], 
     "}"}]}], "]"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"default", " ", "is", " ", "batch", " ", "mode"}], ",", " ", 
    RowBox[{"fast", " ", "method"}]}], "*)"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SQLExecute", "[", 
   RowBox[{
   "conn", ",", 
    "\"\<INSERT INTO `testdb`.`students` (`firstName`, `lName`, `class`, \
`age`) VALUES ('hu', 'bil', 'math', '25');\>\""}], "]"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "use", " ", "place", " ", "holders", " ", "in", " ", "VALUES", " ", 
     "section"}], ",", " ", 
    RowBox[{
    "take", " ", "note", " ", "the", " ", "quote", " ", "symbol", " ", "is", 
     " ", "``"}], ",", " ", 
    RowBox[{"not", " ", "''"}], ",", " ", 
    RowBox[{"alternatively", " ", "can", " ", "also", " ", 
     RowBox[{"use", " ", "?", " ", "as"}], " ", "a", " ", "plase", " ", 
     "holder"}]}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SQLExecute", "[", 
   RowBox[{
   "conn", ",", 
    "\"\<INSERT INTO `testdb`.`students` (`firstName`, `lName`, `class`, \
`age`) VALUES (`1`, `2`, `3`, `4`);\>\"", ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<hh\>\"", ",", "\"\<leo\>\"", ",", "\"\<omni\>\"", ",", "29"}], 
     "}"}]}], "]"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"SQLExecute", "[", 
  RowBox[{"conn", ",", "\"\<INSERT INTO `1` (`2`) VALUES (`3`);\>\"", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"SQLTable", "[", "\"\<students\>\"", "]"}], ",", 
     RowBox[{"SQLArgument", "[", 
      RowBox[{
       RowBox[{"SQLColumn", "[", "\"\<firstName\>\"", "]"}], ",", 
       RowBox[{"SQLColumn", "[", "\"\<lName\>\"", "]"}], ",", 
       RowBox[{"SQLColumn", "[", "\"\<class\>\"", "]"}], ",", 
       RowBox[{"SQLColumn", "[", "\"\<age\>\"", "]"}]}], "]"}], ",", 
     RowBox[{"SQLArgument", "[", 
      RowBox[{
      "\"\<hh2\>\"", ",", "\"\<leo2\>\"", ",", "\"\<omni2\>\"", ",", "29"}], 
      "]"}]}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.712889967470168*^9, 3.7128900102382145`*^9}, {
  3.7128900753352056`*^9, 3.712890098475606*^9}, {3.712892044873145*^9, 
  3.712892057472679*^9}, {3.713576202630372*^9, 
  3.7135762126554594`*^9}},ExpressionUUID->"8f46935c-7eff-4647-959a-\
2acc4f8e67ee"],

Cell[BoxData[
 RowBox[{"SQLUpdate", "[", 
  RowBox[{"conn", ",", "\"\<students\>\"", ",", 
   RowBox[{"{", "\"\<age\>\"", "}"}], ",", 
   RowBox[{"{", "28", "}"}], ",", 
   RowBox[{
    RowBox[{"SQLColumn", "[", "\"\<age\>\"", "]"}], ">", "28"}]}], 
  "]"}]], "Input",ExpressionUUID->"f1c00ba6-1ae0-4fdd-b1de-8511848e9048"],

Cell[TextData[StyleBox["Select and get item names based on string pattern \
tests: ",
 FontColor->RGBColor[0.5, 0, 0.5]]], "ItemNumbered",
 CellChangeTimes->{{3.7257700602440786`*^9, 3.7257700917517443`*^9}, {
  3.783136139839074*^9, 
  3.783136139939051*^9}},ExpressionUUID->"445bdd55-f3da-44bd-8074-\
97b71b99713d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"systNames", "=", 
   RowBox[{"SQLSelect", "[", 
    RowBox[{"conn", ",", "\"\<pv_systems\>\"", ",", 
     RowBox[{"{", "\"\<system_id\>\"", "}"}], ",", 
     RowBox[{
      RowBox[{"SQLStringMatchQ", "[", 
       RowBox[{
        RowBox[{"SQLColumn", "[", "\"\<system_id\>\"", "]"}], ",", 
        "\"\<Sg_Tengeh%\>\""}], "]"}], "&&", 
      RowBox[{
       RowBox[{"SQLColumn", "[", "\"\<system_type\>\"", "]"}], "\[NotEqual]", 
       "\"\<floating sub-array\>\""}]}]}], "]"}]}], ";"}]], "Input",Expression\
UUID->"3857171e-c8cd-4c94-9bd1-0c4efc97ccad"],

Cell[TextData[StyleBox["Create Tables",
 FontColor->RGBColor[0.5, 0, 0.5]]], "ItemNumbered",
 CellChangeTimes->{{3.7257700602440786`*^9, 3.7257700917517443`*^9}, {
  3.783136141830296*^9, 
  3.783136144544446*^9}},ExpressionUUID->"76a02ec9-981e-449c-b808-\
3ad749a1e34c"],

Cell[BoxData[
 RowBox[{"SQLCreateTable", "[", 
  RowBox[{"conn", ",", 
   RowBox[{"SQLTable", "[", "\"\<TEST3\>\"", "]"}], ",", " ", 
   "\[IndentingNewLine]", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"SQLColumn", "[", 
      RowBox[{"\"\<TINYINTCOL\>\"", ",", 
       RowBox[{"\"\<DataTypeName\>\"", "\[Rule]", "\"\<TINYINT\>\""}]}], 
      "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"SQLColumn", "[", 
      RowBox[{"\"\<SMALLINTCOL\>\"", ",", 
       RowBox[{"\"\<DataTypeName\>\"", "\[Rule]", "\"\<SMALLINT\>\""}]}], 
      "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"SQLColumn", "[", 
      RowBox[{"\"\<INTEGERCOL\>\"", ",", 
       RowBox[{"\"\<DataTypeName\>\"", "\[Rule]", "\"\<INTEGER\>\""}]}], 
      "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"SQLColumn", "[", 
      RowBox[{"\"\<BIGINTCOL\>\"", ",", 
       RowBox[{"\"\<DataTypeName\>\"", "\[Rule]", "\"\<BIGINT\>\""}]}], "]"}],
      ",", "\[IndentingNewLine]", 
     RowBox[{"SQLColumn", "[", 
      RowBox[{"\"\<NUMERICCOL\>\"", ",", 
       RowBox[{"\"\<DataTypeName\>\"", "\[Rule]", "\"\<NUMERIC\>\""}]}], 
      "]"}], ",", 
     RowBox[{"SQLColumn", "[", 
      RowBox[{"\"\<DECIMALCOL\>\"", ",", 
       RowBox[{"\"\<DataTypeName\>\"", "\[Rule]", "\"\<DECIMAL\>\""}]}], 
      "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"SQLColumn", "[", 
      RowBox[{"\"\<FLOATCOL\>\"", ",", 
       RowBox[{"\"\<DataTypeName\>\"", "\[Rule]", "\"\<FLOAT\>\""}]}], "]"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"SQLColumn", "[", 
      RowBox[{"\"\<REALCOL\>\"", ",", 
       RowBox[{"\"\<DataTypeName\>\"", "\[Rule]", "\"\<REAL\>\""}]}], "]"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"SQLColumn", "[", 
      RowBox[{"\"\<DOUBLECOL\>\"", ",", 
       RowBox[{"\"\<DataTypeName\>\"", "\[Rule]", "\"\<DOUBLE\>\""}]}], "]"}],
      ",", 
     RowBox[{"SQLColumn", "[", 
      RowBox[{"\"\<BITCOL\>\"", ",", 
       RowBox[{"\"\<DataTypeName\>\"", "\[Rule]", "\"\<BIT\>\""}]}], "]"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"SQLColumn", "[", 
      RowBox[{"\"\<LONGVARBINARYCOL\>\"", ",", 
       RowBox[{"\"\<DataTypeName\>\"", "\[Rule]", "\"\<LONGVARBINARY\>\""}]}],
       "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"SQLColumn", "[", 
      RowBox[{"\"\<VARBINARYCOL\>\"", ",", 
       RowBox[{"\"\<DataTypeName\>\"", "\[Rule]", "\"\<VARBINARY\>\""}], ",", 
       RowBox[{"\"\<DataLength\>\"", "\[Rule]", "100"}]}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"SQLColumn", "[", 
      RowBox[{"\"\<BINARYCOL\>\"", ",", 
       RowBox[{"\"\<DataTypeName\>\"", "\[Rule]", "\"\<BINARY\>\""}]}], "]"}],
      ",", "\[IndentingNewLine]", 
     RowBox[{"SQLColumn", "[", 
      RowBox[{"\"\<LONGVARCHARCOL\>\"", ",", 
       RowBox[{"\"\<DataTypeName\>\"", "\[Rule]", "\"\<LONGVARCHAR\>\""}]}], 
      "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"SQLColumn", "[", 
      RowBox[{"\"\<VARCHARCOL\>\"", ",", 
       RowBox[{"\"\<DataTypeName\>\"", "\[Rule]", "\"\<VARCHAR\>\""}], ",", 
       RowBox[{"\"\<DataLength\>\"", "\[Rule]", "5"}]}], "]"}], ",", 
     RowBox[{"SQLColumn", "[", 
      RowBox[{"\"\<CHARCOL\>\"", ",", 
       RowBox[{"\"\<DataTypeName\>\"", "\[Rule]", "\"\<CHAR\>\""}], ",", 
       RowBox[{"\"\<DataLength\>\"", "\[Rule]", "3"}]}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"SQLColumn", "[", 
      RowBox[{"\"\<DATECOL\>\"", ",", 
       RowBox[{"\"\<DataTypeName\>\"", "\[Rule]", "\"\<DATE\>\""}]}], "]"}], 
     ",", 
     RowBox[{"SQLColumn", "[", 
      RowBox[{"\"\<TIMECOL\>\"", ",", 
       RowBox[{"\"\<DataTypeName\>\"", "\[Rule]", "\"\<TIME\>\""}]}], "]"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"SQLColumn", "[", 
      RowBox[{"\"\<TIMESTAMPCOL\>\"", ",", 
       RowBox[{"\"\<DataTypeName\>\"", "\[Rule]", "\"\<TIMESTAMP\>\""}]}], 
      "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"SQLColumn", "[", 
      RowBox[{"\"\<OBJECTCOL\>\"", ",", 
       RowBox[{"\"\<DataTypeName\>\"", "\[Rule]", "\"\<OBJECT\>\""}]}], 
      "]"}]}], "\[IndentingNewLine]", "}"}]}], "]"}]], "Input",ExpressionUUID->\
"f8ed6c7b-e9b5-4315-82b6-f2e63a54abb0"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Basic analysis", "Chapter",
 CellChangeTimes->{{3.7220407192337265`*^9, 
  3.7220407217865477`*^9}},ExpressionUUID->"46519250-e116-44fa-a211-\
dd18748cde19"],

Cell[CellGroupData[{

Cell["Time series inspection", "Section",
 CellChangeTimes->{{3.7220409060049205`*^9, 
  3.722040915934908*^9}},ExpressionUUID->"01eb8954-4f59-435e-9928-\
09b0c447b8e0"],

Cell[CellGroupData[{

Cell["Smoothing", "Subsection",
 CellChangeTimes->{{3.7632698112355137`*^9, 
  3.7632698128092566`*^9}},ExpressionUUID->"ea0f1a7a-514a-47be-8c30-\
355a5f3c5360"],

Cell[TextData[{
 StyleBox["Obtain moving average in a general way ",
  FontColor->RGBColor[0.5, 0, 0.5]],
 StyleBox["by moving map functions to time series data:",
  FontColor->GrayLevel[0]]
}], "ItemNumbered",
 CellChangeTimes->{{3.6875957005000725`*^9, 3.6875957233559475`*^9}, {
   3.7008785802775965`*^9, 3.7008785824854393`*^9}, 3.7578936605303454`*^9, {
   3.7632699524393816`*^9, 
   3.763269973501315*^9}},ExpressionUUID->"663c1bf1-d531-4756-a337-\
f0259a825b22"],

Cell[BoxData[
 RowBox[{"MovingMap", "[", 
  RowBox[{"Median", ",", "timeSeriesObject", ",", 
   RowBox[{"Quantity", "[", 
    RowBox[{"10", ",", "\"\<Days\>\""}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.763269911777323*^9, 
  3.7632699165273247`*^9}},ExpressionUUID->"42a2a82b-f26c-458e-97b3-\
6c8b7a7eb255"],

Cell[CellGroupData[{

Cell["Spline Fitting", "Subsubsection",
 CellChangeTimes->{{3.7632698343667593`*^9, 
  3.7632698424377103`*^9}},ExpressionUUID->"0eb4c1a6-61b7-4a62-b720-\
187f661c3f34"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"SplineModel", "[", 
    RowBox[{"data_", ",", "deg_", ",", "knots_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"basis", ",", "allKnots"}], "}"}], ",", 
     RowBox[{
      RowBox[{"basis", "=", 
       RowBox[{
        RowBox[{"Array", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"\[FormalX]", "^", "#"}], "&"}], ",", 
          RowBox[{"deg", "+", "1"}], ",", "0"}], "]"}], "~", "Join", "~", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"BSplineBasis", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"deg", ",", "knots"}], "}"}], ",", "i", ",", 
            "\[FormalX]"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "0", ",", 
            RowBox[{
             RowBox[{"Length", "[", "knots", "]"}], "-", "deg", "-", "2"}]}], 
           "}"}]}], "]"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"LinearModelFit", "[", 
       RowBox[{"data", ",", "basis", ",", "\[FormalX]"}], "]"}]}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7632698488963327`*^9, 
  3.7632698488963327`*^9}},ExpressionUUID->"e620586e-ed45-4d34-a856-\
73837ca20ddb"],

Cell["Example: ", "Text",
 CellChangeTimes->{{3.763269868246256*^9, 
  3.763269870638808*^9}},ExpressionUUID->"9f71033b-3c5c-419e-a85c-\
5652d0ca3908"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"SeedRandom", "[", "249304", "]"}], ";", 
   RowBox[{"data", "=", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"i", ",", 
        RowBox[{
         RowBox[{"RiemannSiegelZ", "[", "i", "]"}], "+", 
         RowBox[{"Sin", "[", "i", "]"}], "+", 
         RowBox[{"RandomReal", "[", 
          RowBox[{"NormalDistribution", "[", 
           RowBox[{"0", ",", ".2"}], "]"}], "]"}]}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "0", ",", "25", ",", ".05"}], "}"}]}], "]"}]}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"knots", "=", 
   RowBox[{"Range", "[", 
    RowBox[{"0", ",", "25", ",", "1"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"mod", "=", 
    RowBox[{"SplineModel", "[", 
     RowBox[{"data", ",", "3", ",", "knots"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"ListPlot", "[", "data", "]"}], ",", 
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"mod", "[", "x", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", "25"}], "}"}], ",", 
     RowBox[{"PlotStyle", "\[Rule]", 
      RowBox[{"Directive", "[", 
       RowBox[{"Red", ",", "Thick"}], "]"}]}]}], "]"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.763269871709609*^9, 
  3.7632698797975736`*^9}},ExpressionUUID->"3c7cdd79-d8a8-4b1e-b76f-\
42b08c4d6175"],

Cell[BoxData[
 GraphicsBox[{{{}, {{}, 
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.0055000000000000005`], AbsoluteThickness[1.6], 
      PointBox[CompressedData["
1:eJw9mXlcTPv/x9tVRtrQpr1p2qemaQaX80JIIssN2RJXZQs3kuWSfcsSri3c
bMlybZX1apMKXVJKRUplpH2Ztmnx637nfX7zj4fHnHme53l93p/P+bw/WSxZ
M3OZkoKCQpuigsJ//7Kfuwt46k/etqWcO/vf5wbDLape+ORoB/3/CRNkzNQv
OdOc4i747/OCCXLqKb10r52+f8WMeRM8YsgvrSlyWi7zvlWz9rF3J12fz/zh
984paFh9SnDQf59CJkbVtCDmQD39vpi5kZOR9P33ryn/5vz3+cycmRF5cHdL
FfHKmSHTJ6/5ZFtF139lNJt5+uGfvxO/khm6K+yaklce/b6KmT9Aesf4t3y6
n4SJmzt1v/3SD8SrZq5aFCaHjLxEvB+M5rBl1bt9XzByXi2jdEHgp3E2jpHz
6pg3WQ1nh3dnEq+BqfryLLZw6l3iNTHHxueNiT78lq5vYnJKNV+rjL1C/GbG
M9hsaHPeffp9C5NbMd4+/VAF3a+VKcnLuRy8v5SR86TM1Ii788OnfCWelEl/
XP+8eFIKI+e1MVHSJNnFY2mMnNfOLJm44ePrZgnxOpiligEbfx5/QbxOpvRv
7a7gsdnE62Qm+OpefRpfTrwupmGsbMSs6kLiyZimBYeuDDxfTrxu5ol0vsxS
o5h4PUx5htG1PXWsXw/DH3Vm6+frX4nXy3iG71mXMrmUeH3MAa/c8zaj8on3
k5EJ32dZRxURTwERCSMbR534RtcrwF5v+G8JApavgFtl+0K1F1cy//u5QBFj
3Z8ZFYx/R/dThPf7FYncvcnEU0JmUdnQ+JUZxFPC+R0c38yKMuIpYWdo3u8v
Cu6RjzIilKaV31mRTzxlHM85kl4pYvNTweEQgce5tSXEU4HZbF4g9yKbpwrC
x6UIT9gVEE8Vzz7sM/1V/I7GXxXc9jOf17e8onpRw/Uk2wk/bNKoHtQQ8igu
9qjeGapfNeyXOYe01mVRfQ/AmcdvHv1eE0e8AbjTZm3/qCiHeOqInn0s7dCn
EuKpI29W2MMjCVXEU8dojSMfJs4qJJ4G6sI8wizj84mngaDczQ+9XL8RTxNH
9B7vFP0oI54mik5EbVY930I8TeQWfNGvef6DeAPR8r5kbV8TOz8HInDpOP1P
I+uJx4Hp0okr+nY3E4+DL12Swd3PmojHQXPHT4OIqU3EG4Tg1OHtzSFS4g3C
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
       "]]}, {}}, {}, {}, {{}, {}}}, {{{}, {}, 
     TagBox[
      {RGBColor[1, 0, 0], Thickness[Large], Opacity[1.], 
       LineBox[CompressedData["
1:eJwUl3k8VN8bx2cGZUv2JUuyZR1jyShyHtokJEmISLZCJKQiKhWSkEolS6Xk
q5KQhHuTUCGJ7GuI7MxYZtDv/v6a1/t17nmWz/M5597Z5B5g60khkUh2nCTS
/38Vbq08SZfLMsGf35FvzFjE3nGrbfT3iURJJl9aL7ouYh/DXj1V9bmFls5Y
f7HcuIhV0057r/HJQDvMXA3MMxaw2vgmc6b3a3RPQczga+Y89mXblffj3hii
ZD1/557LwL4mdZ4e8f6OyHxiCsqd01hM6t0vt3Ua0WsqC2VlTGOaPshJ73Uj
iqCWB+7zmMaC1iZdCMr9gdxTur4d7prCVnfpV0xn/kTp+6cM7bgnMclP53dM
3GxFOw4t7Vt75i9mUb7Weti7FyXFsoRb7v/GdP65M8Wne5GC4sYTaPNvLF7e
tUHRuA99v3+WZ2vRABbsXhpiV9WHArI9f/c09WM7hwOripr70cnhTHFxsT5s
YKL7WBjzN1ra/PNhqF879ivhRlHi1kFknHHG0uZBG/ZVeyvPi4hBtJ07xuvU
l1as4HRKfjvXEDpTvt/yksYv7BLT4t828WFULEYT2fmvCZNfeZe2YjCC7ASw
E+kNXzDRdM9psQsjyDB0S4j4oVqMG4nspGIj6D0tb8W9pxqbijo1dnTPKNrz
Xj4wfukTVsGpvA0//Bd1FGXFWmSXYS78ya2Xw8aRYJp0y63MNMzmJdJ4WDaO
arULEixskrGd1hMX35ImEJ4pS1mnG4VpJpqrDMZMIFrjCXq9SAxaFvkXvOv+
JCoTn6hOTXiB6tcZ8HC6TKPQZZXtpuIYatonnNoQPo10deI7PiTgqC12UuV+
2jR6eXxkn/+tj2iQ6/lOatc0OsXxwkws5hNaXpGIcjgyg1wPHPkvzr4GqU8u
zec5zqK43VyVKT4NiKb56+rZc7NoDUtnpGv7d2RwskDU7P4sik5Ii1XgbkRm
wyd1W9tmUYVBB9PoVyNy7On0JzvMIeqrdz7Gx5pQTEP54CF7BkqqNfIo0W1B
CfwPzsiHMpDiY0WfS9daUIpFKGXsDgOFa+jb97a1oIxqqnxUCwNZalSoHzn3
CxVXZBzJtWOixzMrFkdetKKy5Qt/g4OZiPvI2y3NM62ocpvDOZTCREq0gIuD
hm2ooVjwXvNPJgpjjxyvq2xDQ68uNa3azqM8VX/Rys/t6O+4y7EvQfMII/dE
r1I60LT6tunbyfMoiqJX02zSgZafza5Ta5pH6o5h7P0FHUg04/jegwcWUJff
4rvYmE60oRu1yZ5eQOfvCFs9Ku1E8tIy3iOJC+hX1uRmq7FOpHGvOTqicQGl
7ugcuWzehcxu7cKf719ETuUCWvtnu1CUReGLplOLiPFqu/RNyW5UwaV4e+Xm
IqLpd5w/u70bbQsneR2sW0SQrFVse6UbhdED9l8cWyR+65V3Pu1GxbPdhi94
l5AgTx7196dupHfiA98/8yXE/XVRT+NfNwpSUmeq+Syhr1f3VzVv6EH5vak9
dteX0NM178S0tvQgTfvQN7mfl5D5dKzimGcPOik09KBlcAmdV+45cyC8B+XU
HYwmcbJQdInoS++kHqS0Q+ewvRkLlSayyNnvepD7agZcOsZCFo+T39TV9qDM
9wLqeVEs5Jbbczq7rQf1BEeItGawkPH6n/Haf3qQDG18mYyxEMvAw9KX0YOc
xpyGNXtYqOH6NZYDqRelPvvy/fAKC414U/sXeXvRr2OG7y/LsFHYdhuLfaK9
SEz2+eOXRmyUf6ov0kamF9m1icW3ORF87Oc3bsVelHw7OoTjPBsVh8uGBav2
okbruaPU+2w0qPy24bZmLxLgdTd3LGGjwE8xUt7avcjyc6NOdCsbJX5IfjxJ
60VxUUj69Twb+QV/fquu04tqjV5xdogtI5qd2D1pYn3Ngswk55ZlxPsx9O5H
rV60s+BGq7bdMlLd1MOWUe9Fl/1ZuNOZZYR3ICGqci/CVU/kXk1eRqyDifJM
uV60+rv1dv6bZUSZ+3QmSKKXuId2R3Q2LiNBue92zwR60XmnIq8108vI0ujZ
uiTOXlQipmSjs34FjeRvH9Fd6kELjclbnakrSHwolho/3oMM4smK161W0PT2
SPVHPT0oeE8gf4HfCirZJKzi9b0HFVB6mV03VlDavIHvn4oeNF1u1bv2vxVU
pzCwY9PLHkQ9V1ar+3UF+fFzs0Qe9CA/fY0Cl9EVVCj1qBW72oNGcrmvvt28
ivrow7Sdjj1IxevsqZ7dq0hT7ArImvYgj03Dh3m8VlHbK7eM/M09qO/eJ3XX
p6uIlP86aO1MN5I7qCsa94lY/81z4dvPbuQskLVSOLCK6vxCWRZF3ag9+mIj
76Z/KE/c4VpEcDeShIn3W+AfEuQsVtGx7Ub27CNP3Fz/IcPeBc8sajdqOr01
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
        "]]},
      Annotation[#, "Charting`Private`Tag$212430#1"]& ]}, {}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 25.}, {-2.8223710425526454`, 2.7249918947279954`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.763269887528488*^9},ExpressionUUID->"ea30ec3f-a846-47e2-aac6-\
067ad250590f"]
}, Open  ]]
}, Closed]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Distribution & patterns", "Section",
 CellChangeTimes->{{3.7220409182391953`*^9, 
  3.7220409332348194`*^9}},ExpressionUUID->"b80e502f-377f-4475-94ea-\
7d00eee0921e"],

Cell[CellGroupData[{

Cell["Histogram", "Subsection",
 CellChangeTimes->{{3.7220523078427*^9, 
  3.722052309052684*^9}},ExpressionUUID->"eb1afd4a-42af-43c6-b1b8-\
1733dd62d0bb"],

Cell[BoxData[
 RowBox[{"Histogram", "[", 
  RowBox[{
  "data", ",", "Automatic", ",", "\"\<Probability\>\"", ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Frame", "\[Rule]", "True"}], ",", "\[IndentingNewLine]", 
   RowBox[{"FrameLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<variable\>\"", ",", "\"\<probability\>\""}], "}"}]}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Axes", "\[Rule]", "False"}], ",", "\[IndentingNewLine]", 
   RowBox[{"LabelStyle", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"FontFamily", "\[Rule]", "\"\<Helvetica\>\""}], ",", 
      RowBox[{"FontSize", "\[Rule]", "15"}], ",", 
      RowBox[{"FontWeight", "\[Rule]", "Bold"}], ",", 
      RowBox[{"FontColor", "\[Rule]", "Black"}]}], "}"}]}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7220523279591193`*^9, 3.7220523284030514`*^9}, {
  3.7220523830748005`*^9, 
  3.7220523839377546`*^9}},ExpressionUUID->"df68c0bb-bdeb-46ac-9d4a-\
c4390f68b9cf"]
}, Open  ]]
}, Open  ]],

Cell["Clustering", "Section",
 CellChangeTimes->{{3.7220409354546537`*^9, 
  3.722040936704829*^9}},ExpressionUUID->"84c2abbc-e422-4775-b1b4-\
ef37ad6e1022"]
}, Closed]],

Cell[CellGroupData[{

Cell["Others", "Chapter",
 CellChangeTimes->{{3.7554024914565616`*^9, 
  3.7554024920867004`*^9}},ExpressionUUID->"046afb2c-18a2-48ff-b9f6-\
50d2418da660"],

Cell[CellGroupData[{

Cell["Interpolation", "Section",
 CellChangeTimes->{{3.75540249635548*^9, 
  3.7554024981764536`*^9}},ExpressionUUID->"437c6274-1ee9-400c-a96d-\
dbeede42fcb4"],

Cell["Interpolation for a 2D table: ", "ItemNumbered",
 CellChangeTimes->{{3.7554025092557583`*^9, 
  3.7554025175560026`*^9}},ExpressionUUID->"9c60b5d4-100f-4bf7-90f1-\
da1ec4d76622"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "this", " ", "example", " ", "assumes", " ", "world", " ", "data", " ", 
     "with", " ", "lat", " ", "grid", " ", "89.5", " ", "to"}], " ", "-", 
    RowBox[{"89.5", " ", "and", " ", "longitude", " ", "grid"}], " ", "-", 
    RowBox[{"179.5", " ", "to", " ", "179.5"}]}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Interpolation", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"x", ",", "y"}], "}"}], ",", 
          RowBox[{"data2D", "[", 
           RowBox[{"[", 
            RowBox[{
             RowBox[{"90.5", "-", "x"}], ",", 
             RowBox[{"y", "+", "180.5"}]}], "]"}], "]"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"x", ",", "89.5", ",", 
          RowBox[{"-", "89.5"}], ",", 
          RowBox[{"-", "1"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"y", ",", 
          RowBox[{"-", "179.5"}], ",", "179.5", ",", "1"}], "}"}]}], "]"}], 
      ",", "1"}], "]"}], "]"}], ";"}]}]], "Input",
 CellChangeTimes->{{3.7554025305660577`*^9, 
  3.755402669297721*^9}},ExpressionUUID->"40ebc257-ca59-4b8e-8f53-\
eae5a490f35c"],

Cell["\<\
Sometimes 2D interpolation can get very slow. In such cases it\
\[CloseCurlyQuote]s better to interpolate manually as below: \
\>", "Text",
 CellChangeTimes->{{3.755402678797973*^9, 
  3.7554027062081823`*^9}},ExpressionUUID->"07177d71-cd03-46db-9495-\
a31eb63be398"],

Cell["Construct refined table from existing 2D table: ", "ItemNumbered",
 CellChangeTimes->{{3.755402708628315*^9, 
  3.7554027192081923`*^9}},ExpressionUUID->"47682b74-6d01-47a4-8d30-\
14ab39399950"],

Cell[BoxData[
 RowBox[{"Transpose", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Interpolation", "[", 
        RowBox[{"#", ",", 
         RowBox[{"InterpolationOrder", "\[Rule]", "1"}]}], "]"}], "[", "x", 
       "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", "1", ",", "180", ",", "0.5"}], "}"}]}], "]"}], "&"}],
    "/@", 
   RowBox[{"Transpose", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Interpolation", "[", 
          RowBox[{"#", ",", 
           RowBox[{"InterpolationOrder", "\[Rule]", "1"}]}], "]"}], "[", "x", 
         "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"x", ",", "1", ",", "360", ",", "0.5"}], "}"}]}], "]"}], 
      "&"}], "/@", "data2D"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7554027574991074`*^9, 
  3.755402774094931*^9}},ExpressionUUID->"a967a994-28ff-4787-833d-\
1b75d7dd791a"],

Cell["", "ItemNumbered",
 CellChangeTimes->{{3.755402708628315*^9, 
  3.7554027190181446`*^9}},ExpressionUUID->"5eff187f-4ae2-402e-9e53-\
abed16b9f767"]
}, Open  ]]
}, Closed]]
}, Open  ]]
},
WindowSize->{718, 808},
WindowMargins->{{Automatic, 74}, {924, Automatic}},
FrontEndVersion->"12.0 for Microsoft Windows (64-bit) (April 8, 2019)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 310, 8, 96, "Title",ExpressionUUID->"9a3df7ec-8142-4e80-bc81-12f6de17a7e7"],
Cell[893, 32, 139, 3, 53, "Subtitle",ExpressionUUID->"e161e7c7-fd04-42ea-aa4e-0363b77c43ee"],
Cell[1035, 37, 253, 4, 34, "Text",ExpressionUUID->"4b5f0c3d-ea9a-4836-80c6-06eed0ac0908"],
Cell[CellGroupData[{
Cell[1313, 45, 213, 4, 67, "Chapter",ExpressionUUID->"6ac088be-b681-43c0-a7c3-275eea05dd65"],
Cell[CellGroupData[{
Cell[1551, 53, 339, 5, 67, "Section",ExpressionUUID->"56fc71a3-15f6-4623-8b61-ff6a81789752"],
Cell[1893, 60, 1608, 43, 143, "Input",ExpressionUUID->"c5fd5c41-1cb2-4a33-824f-e346929bca1f"],
Cell[3504, 105, 636, 11, 78, "Text",ExpressionUUID->"2315e416-6c2b-4794-89a6-dc91901aadb2"],
Cell[4143, 118, 544, 14, 48, "Input",ExpressionUUID->"78a212ca-8015-4518-b340-1fceb7e1d08a"],
Cell[4690, 134, 181, 3, 34, "Text",ExpressionUUID->"83c7efcb-726f-497d-8ddf-2988e41a7f3d"],
Cell[4874, 139, 310, 7, 28, "Input",ExpressionUUID->"84931e27-b065-459f-9c53-b8beccc3d382"],
Cell[5187, 148, 595, 15, 48, "Input",ExpressionUUID->"72c3b71f-406b-4f9b-ba60-00108e8223b6"],
Cell[5785, 165, 240, 4, 34, "Text",ExpressionUUID->"f3ea503a-cc1b-422d-a9c0-749a3697287c"],
Cell[6028, 171, 1293, 32, 143, "Input",ExpressionUUID->"916bd2f8-b3bd-4c30-8ec8-41904534a2c9"],
Cell[7324, 205, 367, 8, 56, "Text",ExpressionUUID->"93aff176-f888-4077-841a-f85be7410c34"],
Cell[7694, 215, 1161, 31, 143, "Input",ExpressionUUID->"195bb4dc-fabf-4e1b-9a22-b051232fd015"]
}, Closed]],
Cell[CellGroupData[{
Cell[8892, 251, 189, 3, 53, "Section",ExpressionUUID->"6f9194ca-2288-4a02-95be-919c4e06f161"],
Cell[9084, 256, 481, 7, 43, "ItemNumbered",ExpressionUUID->"520f74ec-183c-455a-bace-3c3bb42cd959"],
Cell[9568, 265, 1759, 45, 136, "Input",ExpressionUUID->"3c7523b0-1940-4da3-8851-cf85afd5be73"],
Cell[11330, 312, 255, 6, 28, "Text",ExpressionUUID->"c8d2c421-982a-4caf-8954-667072f74a74"],
Cell[11588, 320, 2905, 69, 298, "Input",ExpressionUUID->"5be9fc79-dac8-4cef-b0c5-e2a6c4eb3e4b"]
}, Closed]],
Cell[CellGroupData[{
Cell[14530, 394, 153, 3, 53, "Section",ExpressionUUID->"20392b67-68c1-4b4d-9a50-70aa0543cf97"],
Cell[14686, 399, 1335, 37, 136, "Input",ExpressionUUID->"ee73734a-26a7-45d1-8dbc-07af0ed2cb1b"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[16070, 442, 181, 3, 67, "Chapter",ExpressionUUID->"3f07a622-851d-4490-8421-7cafd7c65063"],
Cell[16254, 447, 390, 8, 51, "ItemNumbered",ExpressionUUID->"72107af8-4010-4b17-b1f0-fc4bb78ad3be"],
Cell[CellGroupData[{
Cell[16669, 459, 314, 9, 28, "Input",ExpressionUUID->"472bfd39-e5c1-4472-b19d-29053392e69e"],
Cell[16986, 470, 154, 4, 32, "Output",ExpressionUUID->"d97000ae-8ee9-43b2-8a60-17e5f18f2950"]
}, Open  ]],
Cell[17155, 477, 529, 10, 71, "ItemNumbered",ExpressionUUID->"6bb85e04-1136-45c4-9e11-96161706817e"],
Cell[17687, 489, 897, 26, 68, "Input",ExpressionUUID->"a2a35070-cfa8-450b-a8e4-de9c4be9c5cf"],
Cell[18587, 517, 160, 3, 34, "Text",ExpressionUUID->"1eef8e4b-ca0d-4c1d-9239-c22cba648191"],
Cell[18750, 522, 418, 12, 30, "Input",ExpressionUUID->"b69ebecb-8506-4a9d-9109-2ed80fa80fec"],
Cell[19171, 536, 253, 6, 51, "ItemNumbered",ExpressionUUID->"e22e8ec8-626c-403f-ba72-526660b21887"],
Cell[19427, 544, 307, 8, 28, "Input",ExpressionUUID->"e112b546-c11e-4486-b2dc-63a692d8c482"],
Cell[19737, 554, 196, 3, 31, "ItemNumbered",ExpressionUUID->"d95ee236-fbe0-4ffe-8390-bf8be262e40d"],
Cell[19936, 559, 215, 5, 34, "Text",ExpressionUUID->"06450780-c1ab-4a2a-ab49-5651a83b0217"],
Cell[20154, 566, 1471, 43, 105, "Input",ExpressionUUID->"2e94b845-c5a1-4f3a-9bb0-f08674b2a84b"]
}, Closed]],
Cell[CellGroupData[{
Cell[21662, 614, 274, 4, 56, "Chapter",ExpressionUUID->"a32ae7d5-378f-4c76-931b-340d4dcf9285"],
Cell[21939, 620, 292, 5, 31, "ItemNumbered",ExpressionUUID->"cd629fa1-e804-41df-9190-1be6cc1bcf00"],
Cell[22234, 627, 1070, 28, 86, "Input",ExpressionUUID->"a9f3848f-346d-4ee6-a44a-c7866a57e3c9"],
Cell[23307, 657, 185, 3, 34, "Text",ExpressionUUID->"d342060b-0580-4442-bb65-80e2e0ab4256"],
Cell[23495, 662, 1360, 38, 86, "Input",ExpressionUUID->"edb76c35-4ae0-4b88-8fc0-f053eae3281e"],
Cell[24858, 702, 308, 6, 31, "ItemNumbered",ExpressionUUID->"f7ad0782-115b-4573-84e4-ed9c9d1f6cd7"],
Cell[25169, 710, 528, 13, 45, "Input",ExpressionUUID->"be797016-34e5-454f-8eaf-df9a3dc31130"],
Cell[25700, 725, 896, 25, 28, "Input",ExpressionUUID->"75dd9c42-370e-46a6-b0f7-2166e10a7b5e"],
Cell[CellGroupData[{
Cell[26621, 754, 202, 4, 28, "Input",ExpressionUUID->"32425017-4332-4879-acb9-89454c7e6f5b"],
Cell[26826, 760, 303, 6, 49, "Output",ExpressionUUID->"61ecdace-aae8-4678-bd96-08fe6b4d6527"]
}, Open  ]],
Cell[27144, 769, 254, 6, 51, "ItemNumbered",ExpressionUUID->"a41a8c2e-7f20-4127-bd08-4a9faa43a4d9"],
Cell[27401, 777, 284, 7, 28, "Input",ExpressionUUID->"0b4053e6-46f3-4ee6-95ad-f5a12f614c91"],
Cell[27688, 786, 206, 3, 31, "ItemNumbered",ExpressionUUID->"0c7a17d7-aa7c-470b-b407-338e60ca7e48"],
Cell[CellGroupData[{
Cell[27919, 793, 1215, 35, 86, "Input",ExpressionUUID->"09481e9a-fa94-482f-ab3a-55e0920aa1c6"],
Cell[29137, 830, 414, 11, 32, "Output",ExpressionUUID->"0737980f-ca74-4a76-99a8-8a7129862ab7"]
}, Open  ]],
Cell[29566, 844, 157, 3, 34, "Text",ExpressionUUID->"d945c612-54f2-45ed-9462-06fa09eccdfb"],
Cell[CellGroupData[{
Cell[29748, 851, 359, 10, 28, "Input",ExpressionUUID->"a931f0bf-d55f-4221-9aa8-d0cfa0758272"],
Cell[30110, 863, 414, 11, 32, "Output",ExpressionUUID->"87845b86-7009-4253-a91f-943d6327342f"]
}, Open  ]],
Cell[30539, 877, 239, 6, 34, "Text",ExpressionUUID->"aaec049d-bb9a-4140-8513-e564ef391309"],
Cell[CellGroupData[{
Cell[30803, 887, 741, 22, 48, "Input",ExpressionUUID->"d8db1f03-8191-47b4-8648-7b36bc7bc3e1"],
Cell[31547, 911, 390, 11, 32, "Output",ExpressionUUID->"83bee762-55de-4544-b8c8-b52e4ab4b81e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[31974, 927, 239, 4, 67, "Section",ExpressionUUID->"ef734c53-8b5a-44ae-9ce3-c60aff36882d"],
Cell[32216, 933, 359, 6, 31, "ItemNumbered",ExpressionUUID->"9f82eb04-f715-4703-a2a2-8ba40e8e1f53"],
Cell[32578, 941, 588, 11, 100, "Text",ExpressionUUID->"c269fd47-159d-4335-84b3-2f2f54279c68"],
Cell[33169, 954, 681, 22, 48, "Input",ExpressionUUID->"3e137f24-fc99-4c8b-891f-64d13f4cb079"],
Cell[33853, 978, 738, 24, 48, "Input",ExpressionUUID->"1ae6b602-2349-4ff1-91dc-9d61e408c9b4"],
Cell[34594, 1004, 157, 3, 34, "Text",ExpressionUUID->"c7bea361-f6af-4729-8c67-f27c4276bccf"],
Cell[34754, 1009, 845, 26, 48, "Input",ExpressionUUID->"15e22e07-1328-45a8-a7a6-7a8abd520eba"],
Cell[35602, 1037, 211, 4, 34, "Text",ExpressionUUID->"9f5931b1-25a8-4264-8b2a-89324781949e"],
Cell[35816, 1043, 929, 27, 48, "Input",ExpressionUUID->"52c662e4-94c4-4f89-abc4-21404b6514e4"],
Cell[CellGroupData[{
Cell[36770, 1074, 210, 5, 28, "Input",ExpressionUUID->"c50b9e47-b1ef-451d-9f55-cfd35b60e1b5"],
Cell[36983, 1081, 887, 27, 52, "Output",ExpressionUUID->"8ef59fa0-8730-4df8-ab0b-623415a0b5f3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[37907, 1113, 425, 13, 28, "Input",ExpressionUUID->"cdcf5832-dd20-4e91-aea2-2893d0315863"],
Cell[38335, 1128, 806, 24, 32, "Output",ExpressionUUID->"99b6856a-0e6e-4afb-b866-6e8d98ea6ad2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[39178, 1157, 308, 8, 28, "Input",ExpressionUUID->"13a25a30-5a0e-42ac-956b-8f077ea107ef"],
Cell[39489, 1167, 273, 7, 32, "Output",ExpressionUUID->"ec6d5bfa-5414-4d08-9dd8-4207de792833"]
}, Open  ]],
Cell[CellGroupData[{
Cell[39799, 1179, 738, 24, 48, "Input",ExpressionUUID->"89be77f5-1b6a-464f-9574-46a777b8e81d"],
Cell[40540, 1205, 447, 11, 32, "Output",ExpressionUUID->"baca8112-81d4-4d8d-b0dd-4e265bef220f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[41024, 1221, 186, 4, 28, "Input",ExpressionUUID->"8534773c-73aa-4230-b957-d7376c2c63be"],
Cell[41213, 1227, 937, 22, 65, "Output",ExpressionUUID->"f7b6cde8-ae10-449e-b66e-42899758decb"]
}, Open  ]],
Cell[42165, 1252, 514, 8, 31, "ItemNumbered",ExpressionUUID->"5c53e4b5-bc91-4ec7-b6b0-190a384e46e2"],
Cell[42682, 1262, 840, 16, 166, "Text",ExpressionUUID->"276cb093-8dc1-4d6e-b866-d1501e5ca80c"],
Cell[43525, 1280, 9103, 209, 865, "Input",ExpressionUUID->"0ba05db5-aa9c-483c-bbd6-2362e2ca45fb"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[52677, 1495, 294, 5, 56, "Chapter",ExpressionUUID->"4be31ab2-4fba-4320-864f-6802869a2580"],
Cell[CellGroupData[{
Cell[52996, 1504, 141, 3, 67, "Section",ExpressionUUID->"5d7c5e6b-5a34-459d-a42c-c1609d877a44"],
Cell[CellGroupData[{
Cell[53162, 1511, 222, 4, 48, "Subsection",ExpressionUUID->"17f6f54b-f44a-4ca5-ae4c-61a2f4925fb5"],
Cell[53387, 1517, 437, 7, 43, "ItemNumbered",ExpressionUUID->"6e7d839c-fd7b-4d38-ae1f-82b1a6f92f69"],
Cell[53827, 1526, 1232, 37, 46, "Input",ExpressionUUID->"4d9f764c-144d-4d12-8774-ece1c5ced986"],
Cell[55062, 1565, 1203, 36, 64, "Input",ExpressionUUID->"fa5e321b-d772-48a1-a5c6-5d1ea8343a2a"],
Cell[56268, 1603, 179, 3, 28, "Text",ExpressionUUID->"86dd70c3-70a6-46fe-bacc-a18d3621036d"],
Cell[56450, 1608, 500, 15, 27, "Input",ExpressionUUID->"bfed69e4-b97d-4fe5-acce-c34a9680b173"],
Cell[56953, 1625, 324, 7, 47, "Text",ExpressionUUID->"7ec1caaf-7c56-42e3-906d-ef8e168f97e7"],
Cell[57280, 1634, 747, 16, 46, "Input",ExpressionUUID->"6a6da98d-5f43-4e7e-83b8-74bad989ed18"],
Cell[58030, 1652, 315, 7, 28, "Text",ExpressionUUID->"755c85b0-cb04-4732-b98d-8254f8b49ad7"],
Cell[58348, 1661, 188, 3, 28, "Text",ExpressionUUID->"6ed0e381-8409-49ce-bc6f-b88f352f7aac"],
Cell[58539, 1666, 1399, 33, 154, "Input",ExpressionUUID->"6661b923-db18-478e-8223-acf8339a9d85"],
Cell[59941, 1701, 282, 5, 26, "ItemNumbered",ExpressionUUID->"98ad3697-8a82-46ef-b8d3-b8055765a867"],
Cell[60226, 1708, 3417, 85, 168, "Input",ExpressionUUID->"32a568aa-c016-4a34-abed-a7e3fa88cd6b"],
Cell[63646, 1795, 416, 9, 43, "ItemNumbered",ExpressionUUID->"f6f2ec34-a0ba-495e-87ba-31737b7a68a1"],
Cell[64065, 1806, 971, 24, 64, "Input",ExpressionUUID->"abdad07f-9186-400c-b9dd-d71935d21e02"],
Cell[65039, 1832, 249, 6, 28, "Text",ExpressionUUID->"a2b677ee-536e-479c-a879-0e6bed4b4bd1"],
Cell[65291, 1840, 741, 21, 46, "Input",ExpressionUUID->"936f10ef-56c5-4140-9e3a-44ed27d72a47"],
Cell[66035, 1863, 299, 5, 26, "ItemNumbered",ExpressionUUID->"9e1757b7-6983-4daa-a208-cc90d178e6a9"],
Cell[66337, 1870, 214, 5, 28, "Text",ExpressionUUID->"7610c7fe-b7b0-42a3-8097-b7db4445702e"],
Cell[66554, 1877, 508, 15, 27, "Input",ExpressionUUID->"d8ae1b76-54d3-4bec-949a-1208e68b16d8"],
Cell[67065, 1894, 187, 3, 28, "Text",ExpressionUUID->"4175b3a2-defd-437a-8d3b-0921b3e1182f"],
Cell[67255, 1899, 1898, 55, 172, "Input",ExpressionUUID->"5c140b5d-1c07-4d65-bd6f-d7dd7dbf48cf"],
Cell[69156, 1956, 304, 5, 26, "ItemNumbered",ExpressionUUID->"16c385d4-5f33-4a4f-8d01-9e9749a2f875"],
Cell[69463, 1963, 550, 16, 27, "Input",ExpressionUUID->"69be033e-5258-40a5-bf3d-d1fd64b14697"]
}, Closed]],
Cell[70028, 1982, 190, 3, 34, "Subsection",ExpressionUUID->"fa96bddb-4acb-4c0c-8121-5ab58d9161fe"]
}, Closed]],
Cell[CellGroupData[{
Cell[70255, 1990, 233, 4, 53, "Section",ExpressionUUID->"5f59669c-e94d-43fa-8e08-259a2ab9c378"],
Cell[70491, 1996, 421, 6, 31, "ItemNumbered",ExpressionUUID->"dc3b82d6-76a4-478b-b01f-31b981d8f4ed"],
Cell[70915, 2004, 491, 15, 28, "Input",ExpressionUUID->"69d250a7-b059-4df3-ab1f-aa3486a0e430"],
Cell[CellGroupData[{
Cell[71431, 2023, 224, 3, 28, "Input",ExpressionUUID->"7a602d84-bcfc-4a21-b44c-7240eda5064e"],
Cell[71658, 2028, 173, 2, 32, "Output",ExpressionUUID->"105e6883-7dc1-49cb-a4b5-b2b5f473d157"]
}, Open  ]],
Cell[71846, 2033, 193, 3, 34, "Text",ExpressionUUID->"f5a293c7-64b0-40b8-b8ec-eab58195887a"],
Cell[72042, 2038, 577, 15, 28, "Input",ExpressionUUID->"5e2b8ec0-bfe4-4016-aabb-c80cb4e92087"],
Cell[72622, 2055, 339, 7, 56, "Text",ExpressionUUID->"c034fb95-5686-4d9b-90c6-80de5fe82dc0"],
Cell[72964, 2064, 445, 13, 28, "Input",ExpressionUUID->"8f0a7eb6-dec8-4698-ab33-39657af36742"],
Cell[73412, 2079, 541, 13, 48, "Input",ExpressionUUID->"30a56a4a-2035-415b-92d4-be161e4fcea5"],
Cell[73956, 2094, 296, 6, 56, "Text",ExpressionUUID->"94589f93-9bef-4d18-8149-b6a264d19784"],
Cell[74255, 2102, 279, 6, 56, "Text",ExpressionUUID->"4a0766f0-b36f-4b19-b909-0a831e5db1f8"],
Cell[74537, 2110, 422, 6, 31, "ItemNumbered",ExpressionUUID->"589b55cd-cfb2-43ea-a094-2cdbfabab230"],
Cell[74962, 2118, 762, 20, 67, "Input",ExpressionUUID->"33fe77c4-5736-4b8c-b3cb-c0077eb72d0e"],
Cell[75727, 2140, 365, 6, 31, "ItemNumbered",ExpressionUUID->"0ddc1120-a45a-452b-a73e-03571d3d0567"],
Cell[76095, 2148, 904, 17, 210, "Text",ExpressionUUID->"244de0b6-9f22-4da9-b38f-ee6fd0b8cb7b"],
Cell[77002, 2167, 2337, 58, 143, "Input",ExpressionUUID->"86a32182-ef3d-4dcf-833b-24680c722f75"],
Cell[79342, 2227, 261, 6, 56, "Text",ExpressionUUID->"274cdcd6-efc0-4dd4-b9b6-1f8ef95baebc"],
Cell[79606, 2235, 764, 22, 48, "Input",ExpressionUUID->"0ce71b7c-6f62-49a5-9e55-862844c35743"],
Cell[80373, 2259, 1494, 40, 124, "Input",ExpressionUUID->"da1d7b8d-4059-4170-a7c2-81821f80c293"],
Cell[81870, 2301, 273, 6, 56, "Text",ExpressionUUID->"413ec937-8b6f-42e8-b497-982503ce2965"],
Cell[82146, 2309, 1104, 29, 86, "Input",ExpressionUUID->"1a112f12-b1e0-4276-b628-51ef19aacca3"],
Cell[83253, 2340, 618, 15, 48, "Input",ExpressionUUID->"8c8f0dad-02fb-4714-866f-b68a3e89388f"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[83920, 2361, 172, 3, 67, "Chapter",ExpressionUUID->"156e6a64-313f-49b8-a97d-b56638b92bea"],
Cell[84095, 2366, 286, 6, 31, "ItemNumbered",ExpressionUUID->"0cd285b4-f22f-4ef4-b9f6-6d3221ed5f4b"],
Cell[CellGroupData[{
Cell[84406, 2376, 864, 18, 86, "Input",ExpressionUUID->"2687e1de-d0b3-4c73-90b8-90adb15a2be5"],
Cell[85273, 2396, 10823, 274, 247, "Output",ExpressionUUID->"412bf36c-6e97-456e-84f2-baa48d8a8f25"]
}, Open  ]],
Cell[96111, 2673, 324, 6, 31, "ItemNumbered",ExpressionUUID->"bbed37ec-92d5-4ae4-9218-2f07e47e87bc"],
Cell[CellGroupData[{
Cell[96460, 2683, 410, 11, 28, "Input",ExpressionUUID->"6e7667f9-610f-4fe7-8b98-60fcaee4c0d0"],
Cell[96873, 2696, 307, 7, 32, "Output",ExpressionUUID->"8f7dee6c-75c9-4c2b-a416-799bffdb691f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[97217, 2708, 239, 5, 28, "Input",ExpressionUUID->"ea29082c-cc88-41d6-8f39-8e7391dc145f"],
Cell[97459, 2715, 307, 9, 32, "Output",ExpressionUUID->"e143a22c-0783-41a5-86ca-770aa047ac98"]
}, Open  ]],
Cell[97781, 2727, 377, 7, 31, "ItemNumbered",ExpressionUUID->"2e5c8788-ecf6-4c5d-b692-c3e8f486ec60"],
Cell[CellGroupData[{
Cell[98183, 2738, 319, 7, 28, "Input",ExpressionUUID->"c06c1585-50c6-4f5c-8746-9f1f8703b8b9"],
Cell[98505, 2747, 288, 6, 32, "Output",ExpressionUUID->"316dddef-83ce-414c-815a-349a2ad10c60"]
}, Open  ]],
Cell[98808, 2756, 381, 7, 31, "ItemNumbered",ExpressionUUID->"31544c72-a560-439f-be75-476b66ea4dfd"],
Cell[CellGroupData[{
Cell[99214, 2767, 864, 23, 67, "Input",ExpressionUUID->"ed23cddc-98bd-42f2-87cd-9cc324aa90f5"],
Cell[100081, 2792, 574, 15, 32, "Output",ExpressionUUID->"904adeec-de76-4b60-83ee-af2aff759f52"]
}, Open  ]],
Cell[100670, 2810, 291, 7, 34, "Text",ExpressionUUID->"531a2097-d887-4373-a169-da3b6b213d29"],
Cell[CellGroupData[{
Cell[100986, 2821, 342, 10, 28, "Input",ExpressionUUID->"e773c762-dd87-4f28-827d-e197ab297aa6"],
Cell[101331, 2833, 527, 14, 32, "Output",ExpressionUUID->"46453295-d25c-4c49-8672-6bdca0e282cc"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[101907, 2853, 168, 3, 56, "Chapter",ExpressionUUID->"bd95616b-189c-4196-a143-2e884c2ec1f9"],
Cell[CellGroupData[{
Cell[102100, 2860, 170, 3, 44, "Subsubsection",ExpressionUUID->"4169baa3-103c-4ff6-b2c9-8d4a25fc63a9"],
Cell[102273, 2865, 292, 7, 34, "Text",ExpressionUUID->"80ac29ae-746b-4251-a349-2244da6af24f"],
Cell[102568, 2874, 432, 11, 48, "Input",ExpressionUUID->"d9501976-a636-4874-98c7-f967585bbf5e"],
Cell[103003, 2887, 484, 10, 71, "ItemNumbered",ExpressionUUID->"b0d56c4b-7377-4f63-9fd0-2332e4c6f3b7"],
Cell[103490, 2899, 566, 15, 28, "Input",ExpressionUUID->"886be584-8b1c-4c29-8d47-03cebf17926f"],
Cell[104059, 2916, 275, 6, 31, "ItemNumbered",ExpressionUUID->"8e5c5488-1e0b-49d7-87fa-f652c1bc1f2c"],
Cell[104337, 2924, 713, 20, 86, "Input",ExpressionUUID->"1f20a94d-058f-428f-a944-3498aa5ecfe9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[105087, 2949, 165, 3, 44, "Subsubsection",ExpressionUUID->"b8620845-2315-42df-a129-9b4633e71525"],
Cell[105255, 2954, 403, 8, 78, "Text",ExpressionUUID->"32c4bbd5-6ed1-49a1-9f4d-ef7bb24b1e81"],
Cell[105661, 2964, 290, 4, 31, "ItemNumbered",ExpressionUUID->"5440303f-82d4-4401-95a5-49c3647026a2"],
Cell[105954, 2970, 475, 12, 28, "Input",ExpressionUUID->"e13027c8-0019-4bc2-b4c5-0bd54a24e4b5"],
Cell[106432, 2984, 338, 7, 56, "Text",ExpressionUUID->"aa722f37-db41-4b85-8159-222c6e7966bd"],
Cell[106773, 2993, 383, 10, 28, "Input",ExpressionUUID->"4b43dd59-33f6-46a2-8d78-d4d973181baa"],
Cell[107159, 3005, 360, 7, 51, "ItemNumbered",ExpressionUUID->"0375afdf-3b5c-473a-97b3-5f08f3a82e69"],
Cell[107522, 3014, 419, 9, 34, "Text",ExpressionUUID->"092c71ee-bc8f-4d93-88e7-6b4821ede629"],
Cell[107944, 3025, 1292, 34, 86, "Input",ExpressionUUID->"ade0fb88-a64f-4f93-9d8f-ed8a2f966124"],
Cell[109239, 3061, 198, 3, 34, "Text",ExpressionUUID->"23cc766d-c3f3-479f-b525-4349d7331453"],
Cell[109440, 3066, 297, 7, 51, "ItemNumbered",ExpressionUUID->"50c4cbeb-6f98-4c24-8d2f-c225a51c6567"],
Cell[109740, 3075, 730, 19, 67, "Input",ExpressionUUID->"7997c337-3d4e-4004-b18f-ae074448d006"],
Cell[110473, 3096, 194, 3, 31, "ItemNumbered",ExpressionUUID->"ed833a52-5cfc-4e9b-a51d-b9398bb71556"],
Cell[110670, 3101, 681, 18, 67, "Input",ExpressionUUID->"7c14a3ca-0b0d-4fb1-9b3f-2e66c67dfd0d"],
Cell[111354, 3121, 277, 4, 31, "ItemNumbered",ExpressionUUID->"2b063ddf-049a-40a8-958c-eab8236f10b9"],
Cell[111634, 3127, 773, 20, 48, "Input",ExpressionUUID->"53f74e7d-b1cc-4388-bc84-38537c7008d6"],
Cell[112410, 3149, 263, 4, 31, "ItemNumbered",ExpressionUUID->"dc52d446-f7b5-4741-b48a-9c10f6702b7e"],
Cell[112676, 3155, 198, 3, 34, "Text",ExpressionUUID->"3f7b8e85-2040-4b57-be6c-f52a01f30973"],
Cell[112877, 3160, 459, 13, 28, "Input",ExpressionUUID->"3c7056d7-e0bf-425c-ad4e-56568e880578"],
Cell[113339, 3175, 267, 6, 34, "Text",ExpressionUUID->"1b878115-82c6-48f9-bf4c-3592dd908838"],
Cell[113609, 3183, 460, 14, 28, "Input",ExpressionUUID->"97cf8e4f-6784-4371-9fcd-6d0d0fc760df"]
}, Open  ]],
Cell[CellGroupData[{
Cell[114106, 3202, 278, 4, 44, "Subsubsection",ExpressionUUID->"88cbd7db-c2de-46f3-95e9-7db70c261585"],
Cell[114387, 3208, 736, 12, 71, "ItemNumbered",ExpressionUUID->"75853f3b-aee1-419a-a3fa-843bcc45a02f"],
Cell[115126, 3222, 1083, 30, 105, "Input",ExpressionUUID->"323e5162-4844-449a-bcac-c97a5eb510e5"],
Cell[116212, 3254, 226, 4, 31, "ItemNumbered",ExpressionUUID->"bf665b2b-548f-4161-bc8c-38f8b25a1aca"],
Cell[116441, 3260, 347, 10, 28, "Input",ExpressionUUID->"06a931a2-4c26-45cb-9a6c-903020065e26"]
}, Open  ]],
Cell[CellGroupData[{
Cell[116825, 3275, 162, 3, 44, "Subsubsection",ExpressionUUID->"82f642f3-c951-49be-8485-98d7fbbd33ec"],
Cell[116990, 3280, 673, 11, 51, "ItemNumbered",ExpressionUUID->"5aa6c7fd-3cb0-4545-b1c1-d0e01e3e7742"],
Cell[117666, 3293, 644, 13, 122, "Text",ExpressionUUID->"d683bb75-b1af-4ba9-a595-bd9dd8f418bf"],
Cell[118313, 3308, 727, 18, 67, "Input",ExpressionUUID->"402e2eb2-9337-4530-839f-ce8bc6e45ecd"],
Cell[119043, 3328, 448, 8, 71, "ItemNumbered",ExpressionUUID->"30953e87-827b-402f-820c-f526a555e454"],
Cell[119494, 3338, 1000, 25, 105, "Input",ExpressionUUID->"b06400f7-6bc2-43ec-b939-e1079e161626"]
}, Open  ]],
Cell[CellGroupData[{
Cell[120531, 3368, 160, 3, 44, "Subsubsection",ExpressionUUID->"9a063a62-805e-48e1-97aa-d6ebac02a0d3"],
Cell[120694, 3373, 711, 12, 91, "ItemNumbered",ExpressionUUID->"32d1869c-e101-4f62-b6ac-9fd1ab8f55ea"],
Cell[121408, 3387, 1504, 42, 124, "Input",ExpressionUUID->"e6df591a-ed1a-42e3-93c2-e2bd0a842c17"],
Cell[122915, 3431, 523, 9, 71, "ItemNumbered",ExpressionUUID->"606a33ee-1b57-46b0-b996-6a1f051f9ac5"],
Cell[123441, 3442, 1171, 33, 105, "Input",ExpressionUUID->"f458fc76-eadd-488a-98aa-760a9f70a1fe"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[124661, 3481, 170, 3, 56, "Chapter",ExpressionUUID->"cb6cc509-b0d1-44b5-8e82-4cda301b12c8"],
Cell[CellGroupData[{
Cell[124856, 3488, 203, 4, 67, "Section",ExpressionUUID->"d6b0f03d-7f9f-40da-8cad-9a8b32551782"],
Cell[125062, 3494, 494, 7, 31, "ItemNumbered",ExpressionUUID->"63e7cc1e-bc87-468d-8654-e1ebf0e96ccc"],
Cell[CellGroupData[{
Cell[125581, 3505, 650, 16, 67, "Input",ExpressionUUID->"000dd1d4-fccc-44ce-87be-4814b48b31d5"],
Cell[126234, 3523, 16146, 355, 74, "Output",ExpressionUUID->"70ed271b-f3d6-4141-ae00-54e89de17c94"]
}, Open  ]],
Cell[142395, 3881, 345, 9, 28, "Input",ExpressionUUID->"f4ccd9ec-80a0-4b8c-b5d5-645b43edb788"],
Cell[142743, 3892, 179, 3, 34, "Text",ExpressionUUID->"184d704d-55aa-420f-9950-02de9a00e3b3"],
Cell[142925, 3897, 204, 4, 28, "Input",ExpressionUUID->"4cf92cee-0ca1-46bc-9959-691ce9e27598"],
Cell[143132, 3903, 467, 7, 31, "ItemNumbered",ExpressionUUID->"9485621a-47c0-4992-ad1b-d150e5a47d88"],
Cell[CellGroupData[{
Cell[143624, 3914, 120, 1, 28, "Input",ExpressionUUID->"27e93570-6207-4752-b925-dd74dac8f129"],
Cell[143747, 3917, 293, 8, 32, "Output",ExpressionUUID->"47e6e746-8bb5-4ef0-bc66-5afe38642d57"]
}, Open  ]],
Cell[CellGroupData[{
Cell[144077, 3930, 232, 5, 28, "Input",ExpressionUUID->"d79a6c46-d5fc-49fd-831f-099b09382a9f"],
Cell[144312, 3937, 2122, 45, 166, "Output",ExpressionUUID->"4c8a9bcd-6592-4fc2-b7d6-8dc6d22daad7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[146471, 3987, 541, 13, 48, "Input",ExpressionUUID->"d60976e0-1ed2-47c0-9375-fa46cfd747d1"],
Cell[147015, 4002, 1000, 23, 99, "Output",ExpressionUUID->"226c0971-ff7c-447b-8165-b5fdfaf315b6"]
}, Open  ]],
Cell[148030, 4028, 534, 11, 67, "Input",ExpressionUUID->"88045fb3-c743-4ef8-89d2-243cbb1d3090"],
Cell[148567, 4041, 682, 10, 51, "ItemNumbered",ExpressionUUID->"55f4465f-49f1-488e-a276-b2acaef7b945"],
Cell[149252, 4053, 2680, 65, 333, "Input",ExpressionUUID->"8f46935c-7eff-4647-959a-2acc4f8e67ee"],
Cell[151935, 4120, 323, 7, 28, "Input",ExpressionUUID->"f1c00ba6-1ae0-4fdd-b1de-8511848e9048"],
Cell[152261, 4129, 317, 6, 31, "ItemNumbered",ExpressionUUID->"445bdd55-f3da-44bd-8074-97b71b99713d"],
Cell[152581, 4137, 590, 14, 67, "Input",ExpressionUUID->"3857171e-c8cd-4c94-9bd1-0c4efc97ccad"],
Cell[153174, 4153, 271, 5, 31, "ItemNumbered",ExpressionUUID->"76a02ec9-981e-449c-b808-3ad749a1e34c"],
Cell[153448, 4160, 4154, 89, 447, "Input",ExpressionUUID->"f8ed6c7b-e9b5-4315-82b6-f2e63a54abb0"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[157651, 4255, 163, 3, 56, "Chapter",ExpressionUUID->"46519250-e116-44fa-a211-dd18748cde19"],
Cell[CellGroupData[{
Cell[157839, 4262, 169, 3, 67, "Section",ExpressionUUID->"01eb8954-4f59-435e-9928-09b0c447b8e0"],
Cell[CellGroupData[{
Cell[158033, 4269, 161, 3, 53, "Subsection",ExpressionUUID->"ea0f1a7a-514a-47be-8c30-355a5f3c5360"],
Cell[158197, 4274, 471, 10, 31, "ItemNumbered",ExpressionUUID->"663c1bf1-d531-4756-a337-f0259a825b22"],
Cell[158671, 4286, 316, 7, 28, "Input",ExpressionUUID->"42a2a82b-f26c-458e-97b3-6c8b7a7eb255"],
Cell[CellGroupData[{
Cell[159012, 4297, 169, 3, 44, "Subsubsection",ExpressionUUID->"0eb4c1a6-61b7-4a62-b720-187f661c3f34"],
Cell[159184, 4302, 1237, 34, 92, "Input",ExpressionUUID->"e620586e-ed45-4d34-a856-73837ca20ddb"],
Cell[160424, 4338, 151, 3, 25, "Text",ExpressionUUID->"9f71033b-3c5c-419e-a85c-5652d0ca3908"],
Cell[CellGroupData[{
Cell[160600, 4345, 1439, 41, 138, "Input",ExpressionUUID->"3c7cdd79-d8a8-4b1e-b76f-42b08c4d6175"],
Cell[162042, 4388, 31905, 538, 194, "Output",ExpressionUUID->"ea30ec3f-a846-47e2-aac6-067ad250590f"]
}, Open  ]]
}, Closed]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[194020, 4934, 172, 3, 67, "Section",ExpressionUUID->"b80e502f-377f-4475-94ea-7d00eee0921e"],
Cell[CellGroupData[{
Cell[194217, 4941, 155, 3, 53, "Subsection",ExpressionUUID->"eb1afd4a-42af-43c6-b1b8-1733dd62d0bb"],
Cell[194375, 4946, 1025, 23, 143, "Input",ExpressionUUID->"df68c0bb-bdeb-46ac-9d4a-c4390f68b9cf"]
}, Open  ]]
}, Open  ]],
Cell[195427, 4973, 157, 3, 67, "Section",ExpressionUUID->"84c2abbc-e422-4775-b1b4-ef37ad6e1022"]
}, Closed]],
Cell[CellGroupData[{
Cell[195621, 4981, 155, 3, 56, "Chapter",ExpressionUUID->"046afb2c-18a2-48ff-b9f6-50d2418da660"],
Cell[CellGroupData[{
Cell[195801, 4988, 159, 3, 67, "Section",ExpressionUUID->"437c6274-1ee9-400c-a96d-dbeede42fcb4"],
Cell[195963, 4993, 184, 3, 31, "ItemNumbered",ExpressionUUID->"9c60b5d4-100f-4bf7-90f1-da1ec4d76622"],
Cell[196150, 4998, 1277, 35, 105, "Input",ExpressionUUID->"40ebc257-ca59-4b8e-8f53-eae5a490f35c"],
Cell[197430, 5035, 277, 6, 56, "Text",ExpressionUUID->"07177d71-cd03-46db-9495-a31eb63be398"],
Cell[197710, 5043, 200, 3, 31, "ItemNumbered",ExpressionUUID->"47682b74-6d01-47a4-8d30-14ab39399950"],
Cell[197913, 5048, 963, 29, 67, "Input",ExpressionUUID->"a967a994-28ff-4787-833d-1b75d7dd791a"],
Cell[198879, 5079, 152, 3, 26, "ItemNumbered",ExpressionUUID->"5eff187f-4ae2-402e-9e53-abed16b9f767"]
}, Open  ]]
}, Closed]]
}, Open  ]]
}
]
*)

